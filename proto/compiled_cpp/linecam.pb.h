// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linecam.proto

#ifndef PROTOBUF_INCLUDED_linecam_2eproto
#define PROTOBUF_INCLUDED_linecam_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_linecam_2eproto 

namespace protobuf_linecam_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_linecam_2eproto
namespace dolphindaq {
namespace linecam {
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Metrics;
class MetricsDefaultTypeInternal;
extern MetricsDefaultTypeInternal _Metrics_default_instance_;
class Settings;
class SettingsDefaultTypeInternal;
extern SettingsDefaultTypeInternal _Settings_default_instance_;
}  // namespace linecam
}  // namespace dolphindaq
namespace google {
namespace protobuf {
template<> ::dolphindaq::linecam::Data* Arena::CreateMaybeMessage<::dolphindaq::linecam::Data>(Arena*);
template<> ::dolphindaq::linecam::Image* Arena::CreateMaybeMessage<::dolphindaq::linecam::Image>(Arena*);
template<> ::dolphindaq::linecam::Metrics* Arena::CreateMaybeMessage<::dolphindaq::linecam::Metrics>(Arena*);
template<> ::dolphindaq::linecam::Settings* Arena::CreateMaybeMessage<::dolphindaq::linecam::Settings>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dolphindaq {
namespace linecam {

// ===================================================================

class Settings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dolphindaq.linecam.Settings) */ {
 public:
  Settings();
  virtual ~Settings();

  Settings(const Settings& from);

  inline Settings& operator=(const Settings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Settings(Settings&& from) noexcept
    : Settings() {
    *this = ::std::move(from);
  }

  inline Settings& operator=(Settings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Settings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Settings* internal_default_instance() {
    return reinterpret_cast<const Settings*>(
               &_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Settings* other);
  friend void swap(Settings& a, Settings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Settings* New() const final {
    return CreateMaybeMessage<Settings>(NULL);
  }

  Settings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Settings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Settings& from);
  void MergeFrom(const Settings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Settings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sensor = 3;
  bool has_sensor() const;
  void clear_sensor();
  static const int kSensorFieldNumber = 3;
  const ::std::string& sensor() const;
  void set_sensor(const ::std::string& value);
  #if LANG_CXX11
  void set_sensor(::std::string&& value);
  #endif
  void set_sensor(const char* value);
  void set_sensor(const char* value, size_t size);
  ::std::string* mutable_sensor();
  ::std::string* release_sensor();
  void set_allocated_sensor(::std::string* sensor);

  // optional .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  public:
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // optional uint64 start_shot_num = 1;
  bool has_start_shot_num() const;
  void clear_start_shot_num();
  static const int kStartShotNumFieldNumber = 1;
  ::google::protobuf::uint64 start_shot_num() const;
  void set_start_shot_num(::google::protobuf::uint64 value);

  // optional double exposure = 4;
  bool has_exposure() const;
  void clear_exposure();
  static const int kExposureFieldNumber = 4;
  double exposure() const;
  void set_exposure(double value);

  // optional uint32 image_nx = 5;
  bool has_image_nx() const;
  void clear_image_nx();
  static const int kImageNxFieldNumber = 5;
  ::google::protobuf::uint32 image_nx() const;
  void set_image_nx(::google::protobuf::uint32 value);

  // optional uint32 metrics_batch_size = 6;
  bool has_metrics_batch_size() const;
  void clear_metrics_batch_size();
  static const int kMetricsBatchSizeFieldNumber = 6;
  ::google::protobuf::uint32 metrics_batch_size() const;
  void set_metrics_batch_size(::google::protobuf::uint32 value);

  // optional double clk_dt = 7;
  bool has_clk_dt() const;
  void clear_clk_dt();
  static const int kClkDtFieldNumber = 7;
  double clk_dt() const;
  void set_clk_dt(double value);

  // optional double timtick_secs = 8;
  bool has_timtick_secs() const;
  void clear_timtick_secs();
  static const int kTimtickSecsFieldNumber = 8;
  double timtick_secs() const;
  void set_timtick_secs(double value);

  // optional uint32 clk_dt_timticks = 9;
  bool has_clk_dt_timticks() const;
  void clear_clk_dt_timticks();
  static const int kClkDtTimticksFieldNumber = 9;
  ::google::protobuf::uint32 clk_dt_timticks() const;
  void set_clk_dt_timticks(::google::protobuf::uint32 value);

  // optional uint32 exposure_clk_dts = 10;
  bool has_exposure_clk_dts() const;
  void clear_exposure_clk_dts();
  static const int kExposureClkDtsFieldNumber = 10;
  ::google::protobuf::uint32 exposure_clk_dts() const;
  void set_exposure_clk_dts(::google::protobuf::uint32 value);

  // optional double t1 = 11;
  bool has_t1() const;
  void clear_t1();
  static const int kT1FieldNumber = 11;
  double t1() const;
  void set_t1(double value);

  // optional uint32 t1_clk_dts = 12;
  bool has_t1_clk_dts() const;
  void clear_t1_clk_dts();
  static const int kT1ClkDtsFieldNumber = 12;
  ::google::protobuf::uint32 t1_clk_dts() const;
  void set_t1_clk_dts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dolphindaq.linecam.Settings)
 private:
  void set_has_start_shot_num();
  void clear_has_start_shot_num();
  void set_has_start_time();
  void clear_has_start_time();
  void set_has_sensor();
  void clear_has_sensor();
  void set_has_exposure();
  void clear_has_exposure();
  void set_has_image_nx();
  void clear_has_image_nx();
  void set_has_metrics_batch_size();
  void clear_has_metrics_batch_size();
  void set_has_clk_dt();
  void clear_has_clk_dt();
  void set_has_timtick_secs();
  void clear_has_timtick_secs();
  void set_has_clk_dt_timticks();
  void clear_has_clk_dt_timticks();
  void set_has_exposure_clk_dts();
  void clear_has_exposure_clk_dts();
  void set_has_t1();
  void clear_has_t1();
  void set_has_t1_clk_dts();
  void clear_has_t1_clk_dts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sensor_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::uint64 start_shot_num_;
  double exposure_;
  ::google::protobuf::uint32 image_nx_;
  ::google::protobuf::uint32 metrics_batch_size_;
  double clk_dt_;
  double timtick_secs_;
  ::google::protobuf::uint32 clk_dt_timticks_;
  ::google::protobuf::uint32 exposure_clk_dts_;
  double t1_;
  ::google::protobuf::uint32 t1_clk_dts_;
  friend struct ::protobuf_linecam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dolphindaq.linecam.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Data* other);
  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(NULL);
  }

  Data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dolphindaq.linecam.Image image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  private:
  const ::dolphindaq::linecam::Image& _internal_image() const;
  public:
  const ::dolphindaq::linecam::Image& image() const;
  ::dolphindaq::linecam::Image* release_image();
  ::dolphindaq::linecam::Image* mutable_image();
  void set_allocated_image(::dolphindaq::linecam::Image* image);

  // optional .dolphindaq.linecam.Metrics metrics = 2;
  bool has_metrics() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 2;
  private:
  const ::dolphindaq::linecam::Metrics& _internal_metrics() const;
  public:
  const ::dolphindaq::linecam::Metrics& metrics() const;
  ::dolphindaq::linecam::Metrics* release_metrics();
  ::dolphindaq::linecam::Metrics* mutable_metrics();
  void set_allocated_metrics(::dolphindaq::linecam::Metrics* metrics);

  // @@protoc_insertion_point(class_scope:dolphindaq.linecam.Data)
 private:
  void set_has_image();
  void clear_has_image();
  void set_has_metrics();
  void clear_has_metrics();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::dolphindaq::linecam::Image* image_;
  ::dolphindaq::linecam::Metrics* metrics_;
  friend struct ::protobuf_linecam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dolphindaq.linecam.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(NULL);
  }

  Image* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes yvals = 4;
  bool has_yvals() const;
  void clear_yvals();
  static const int kYvalsFieldNumber = 4;
  const ::std::string& yvals() const;
  void set_yvals(const ::std::string& value);
  #if LANG_CXX11
  void set_yvals(::std::string&& value);
  #endif
  void set_yvals(const char* value);
  void set_yvals(const void* value, size_t size);
  ::std::string* mutable_yvals();
  ::std::string* release_yvals();
  void set_allocated_yvals(::std::string* yvals);

  // optional .google.protobuf.Timestamp shot_time = 2;
  bool has_shot_time() const;
  void clear_shot_time();
  static const int kShotTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_shot_time() const;
  public:
  const ::google::protobuf::Timestamp& shot_time() const;
  ::google::protobuf::Timestamp* release_shot_time();
  ::google::protobuf::Timestamp* mutable_shot_time();
  void set_allocated_shot_time(::google::protobuf::Timestamp* shot_time);

  // optional uint64 shot_num = 1;
  bool has_shot_num() const;
  void clear_shot_num();
  static const int kShotNumFieldNumber = 1;
  ::google::protobuf::uint64 shot_num() const;
  void set_shot_num(::google::protobuf::uint64 value);

  // optional uint64 shot_time_alt_nanos = 3;
  bool has_shot_time_alt_nanos() const;
  void clear_shot_time_alt_nanos();
  static const int kShotTimeAltNanosFieldNumber = 3;
  ::google::protobuf::uint64 shot_time_alt_nanos() const;
  void set_shot_time_alt_nanos(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dolphindaq.linecam.Image)
 private:
  void set_has_shot_num();
  void clear_has_shot_num();
  void set_has_shot_time();
  void clear_has_shot_time();
  void set_has_shot_time_alt_nanos();
  void clear_has_shot_time_alt_nanos();
  void set_has_yvals();
  void clear_has_yvals();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr yvals_;
  ::google::protobuf::Timestamp* shot_time_;
  ::google::protobuf::uint64 shot_num_;
  ::google::protobuf::uint64 shot_time_alt_nanos_;
  friend struct ::protobuf_linecam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Metrics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dolphindaq.linecam.Metrics) */ {
 public:
  Metrics();
  virtual ~Metrics();

  Metrics(const Metrics& from);

  inline Metrics& operator=(const Metrics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Metrics(Metrics&& from) noexcept
    : Metrics() {
    *this = ::std::move(from);
  }

  inline Metrics& operator=(Metrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metrics* internal_default_instance() {
    return reinterpret_cast<const Metrics*>(
               &_Metrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Metrics* other);
  friend void swap(Metrics& a, Metrics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Metrics* New() const final {
    return CreateMaybeMessage<Metrics>(NULL);
  }

  Metrics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Metrics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Metrics& from);
  void MergeFrom(const Metrics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metrics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 shot_num = 1;
  int shot_num_size() const;
  void clear_shot_num();
  static const int kShotNumFieldNumber = 1;
  ::google::protobuf::uint64 shot_num(int index) const;
  void set_shot_num(int index, ::google::protobuf::uint64 value);
  void add_shot_num(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      shot_num() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_shot_num();

  // repeated .google.protobuf.Timestamp shot_time = 2;
  int shot_time_size() const;
  void clear_shot_time();
  static const int kShotTimeFieldNumber = 2;
  ::google::protobuf::Timestamp* mutable_shot_time(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >*
      mutable_shot_time();
  const ::google::protobuf::Timestamp& shot_time(int index) const;
  ::google::protobuf::Timestamp* add_shot_time();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >&
      shot_time() const;

  // repeated int64 shot_time_seconds = 3;
  int shot_time_seconds_size() const;
  void clear_shot_time_seconds();
  static const int kShotTimeSecondsFieldNumber = 3;
  ::google::protobuf::int64 shot_time_seconds(int index) const;
  void set_shot_time_seconds(int index, ::google::protobuf::int64 value);
  void add_shot_time_seconds(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      shot_time_seconds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_shot_time_seconds();

  // repeated int32 shot_time_nanos = 4;
  int shot_time_nanos_size() const;
  void clear_shot_time_nanos();
  static const int kShotTimeNanosFieldNumber = 4;
  ::google::protobuf::int32 shot_time_nanos(int index) const;
  void set_shot_time_nanos(int index, ::google::protobuf::int32 value);
  void add_shot_time_nanos(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shot_time_nanos() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shot_time_nanos();

  // repeated uint64 shot_time_alt_nanos = 5;
  int shot_time_alt_nanos_size() const;
  void clear_shot_time_alt_nanos();
  static const int kShotTimeAltNanosFieldNumber = 5;
  ::google::protobuf::uint64 shot_time_alt_nanos(int index) const;
  void set_shot_time_alt_nanos(int index, ::google::protobuf::uint64 value);
  void add_shot_time_alt_nanos(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      shot_time_alt_nanos() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_shot_time_alt_nanos();

  // repeated uint64 image_sum = 6;
  int image_sum_size() const;
  void clear_image_sum();
  static const int kImageSumFieldNumber = 6;
  ::google::protobuf::uint64 image_sum(int index) const;
  void set_image_sum(int index, ::google::protobuf::uint64 value);
  void add_image_sum(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      image_sum() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_image_sum();

  // repeated double image_mean = 7;
  int image_mean_size() const;
  void clear_image_mean();
  static const int kImageMeanFieldNumber = 7;
  double image_mean(int index) const;
  void set_image_mean(int index, double value);
  void add_image_mean(double value);
  const ::google::protobuf::RepeatedField< double >&
      image_mean() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_image_mean();

  // repeated uint64 image_max = 8;
  int image_max_size() const;
  void clear_image_max();
  static const int kImageMaxFieldNumber = 8;
  ::google::protobuf::uint64 image_max(int index) const;
  void set_image_max(int index, ::google::protobuf::uint64 value);
  void add_image_max(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      image_max() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_image_max();

  // repeated uint64 image_min = 9;
  int image_min_size() const;
  void clear_image_min();
  static const int kImageMinFieldNumber = 9;
  ::google::protobuf::uint64 image_min(int index) const;
  void set_image_min(int index, ::google::protobuf::uint64 value);
  void add_image_min(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      image_min() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_image_min();

  // repeated double image_custom = 10;
  int image_custom_size() const;
  void clear_image_custom();
  static const int kImageCustomFieldNumber = 10;
  double image_custom(int index) const;
  void set_image_custom(int index, double value);
  void add_image_custom(double value);
  const ::google::protobuf::RepeatedField< double >&
      image_custom() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_image_custom();

  // @@protoc_insertion_point(class_scope:dolphindaq.linecam.Metrics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > shot_num_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp > shot_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > shot_time_seconds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shot_time_nanos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > shot_time_alt_nanos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > image_sum_;
  ::google::protobuf::RepeatedField< double > image_mean_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > image_max_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > image_min_;
  ::google::protobuf::RepeatedField< double > image_custom_;
  friend struct ::protobuf_linecam_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Settings

// optional uint64 start_shot_num = 1;
inline bool Settings::has_start_shot_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Settings::set_has_start_shot_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Settings::clear_has_start_shot_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Settings::clear_start_shot_num() {
  start_shot_num_ = GOOGLE_ULONGLONG(0);
  clear_has_start_shot_num();
}
inline ::google::protobuf::uint64 Settings::start_shot_num() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Settings.start_shot_num)
  return start_shot_num_;
}
inline void Settings::set_start_shot_num(::google::protobuf::uint64 value) {
  set_has_start_shot_num();
  start_shot_num_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Settings.start_shot_num)
}

// optional .google.protobuf.Timestamp start_time = 2;
inline bool Settings::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Settings::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Settings::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::google::protobuf::Timestamp& Settings::_internal_start_time() const {
  return *start_time_;
}
inline const ::google::protobuf::Timestamp& Settings::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Settings.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Settings::release_start_time() {
  // @@protoc_insertion_point(field_release:dolphindaq.linecam.Settings.start_time)
  clear_has_start_time();
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Settings::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dolphindaq.linecam.Settings.start_time)
  return start_time_;
}
inline void Settings::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    set_has_start_time();
  } else {
    clear_has_start_time();
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.linecam.Settings.start_time)
}

// optional string sensor = 3;
inline bool Settings::has_sensor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Settings::set_has_sensor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Settings::clear_has_sensor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Settings::clear_sensor() {
  sensor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor();
}
inline const ::std::string& Settings::sensor() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Settings.sensor)
  return sensor_.GetNoArena();
}
inline void Settings::set_sensor(const ::std::string& value) {
  set_has_sensor();
  sensor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Settings.sensor)
}
#if LANG_CXX11
inline void Settings::set_sensor(::std::string&& value) {
  set_has_sensor();
  sensor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dolphindaq.linecam.Settings.sensor)
}
#endif
inline void Settings::set_sensor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sensor();
  sensor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dolphindaq.linecam.Settings.sensor)
}
inline void Settings::set_sensor(const char* value, size_t size) {
  set_has_sensor();
  sensor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dolphindaq.linecam.Settings.sensor)
}
inline ::std::string* Settings::mutable_sensor() {
  set_has_sensor();
  // @@protoc_insertion_point(field_mutable:dolphindaq.linecam.Settings.sensor)
  return sensor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Settings::release_sensor() {
  // @@protoc_insertion_point(field_release:dolphindaq.linecam.Settings.sensor)
  if (!has_sensor()) {
    return NULL;
  }
  clear_has_sensor();
  return sensor_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Settings::set_allocated_sensor(::std::string* sensor) {
  if (sensor != NULL) {
    set_has_sensor();
  } else {
    clear_has_sensor();
  }
  sensor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor);
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.linecam.Settings.sensor)
}

// optional double exposure = 4;
inline bool Settings::has_exposure() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Settings::set_has_exposure() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Settings::clear_has_exposure() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Settings::clear_exposure() {
  exposure_ = 0;
  clear_has_exposure();
}
inline double Settings::exposure() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Settings.exposure)
  return exposure_;
}
inline void Settings::set_exposure(double value) {
  set_has_exposure();
  exposure_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Settings.exposure)
}

// optional uint32 image_nx = 5;
inline bool Settings::has_image_nx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Settings::set_has_image_nx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Settings::clear_has_image_nx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Settings::clear_image_nx() {
  image_nx_ = 0u;
  clear_has_image_nx();
}
inline ::google::protobuf::uint32 Settings::image_nx() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Settings.image_nx)
  return image_nx_;
}
inline void Settings::set_image_nx(::google::protobuf::uint32 value) {
  set_has_image_nx();
  image_nx_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Settings.image_nx)
}

// optional uint32 metrics_batch_size = 6;
inline bool Settings::has_metrics_batch_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Settings::set_has_metrics_batch_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Settings::clear_has_metrics_batch_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Settings::clear_metrics_batch_size() {
  metrics_batch_size_ = 0u;
  clear_has_metrics_batch_size();
}
inline ::google::protobuf::uint32 Settings::metrics_batch_size() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Settings.metrics_batch_size)
  return metrics_batch_size_;
}
inline void Settings::set_metrics_batch_size(::google::protobuf::uint32 value) {
  set_has_metrics_batch_size();
  metrics_batch_size_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Settings.metrics_batch_size)
}

// optional double clk_dt = 7;
inline bool Settings::has_clk_dt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Settings::set_has_clk_dt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Settings::clear_has_clk_dt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Settings::clear_clk_dt() {
  clk_dt_ = 0;
  clear_has_clk_dt();
}
inline double Settings::clk_dt() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Settings.clk_dt)
  return clk_dt_;
}
inline void Settings::set_clk_dt(double value) {
  set_has_clk_dt();
  clk_dt_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Settings.clk_dt)
}

// optional double timtick_secs = 8;
inline bool Settings::has_timtick_secs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Settings::set_has_timtick_secs() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Settings::clear_has_timtick_secs() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Settings::clear_timtick_secs() {
  timtick_secs_ = 0;
  clear_has_timtick_secs();
}
inline double Settings::timtick_secs() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Settings.timtick_secs)
  return timtick_secs_;
}
inline void Settings::set_timtick_secs(double value) {
  set_has_timtick_secs();
  timtick_secs_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Settings.timtick_secs)
}

// optional uint32 clk_dt_timticks = 9;
inline bool Settings::has_clk_dt_timticks() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Settings::set_has_clk_dt_timticks() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Settings::clear_has_clk_dt_timticks() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Settings::clear_clk_dt_timticks() {
  clk_dt_timticks_ = 0u;
  clear_has_clk_dt_timticks();
}
inline ::google::protobuf::uint32 Settings::clk_dt_timticks() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Settings.clk_dt_timticks)
  return clk_dt_timticks_;
}
inline void Settings::set_clk_dt_timticks(::google::protobuf::uint32 value) {
  set_has_clk_dt_timticks();
  clk_dt_timticks_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Settings.clk_dt_timticks)
}

// optional uint32 exposure_clk_dts = 10;
inline bool Settings::has_exposure_clk_dts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Settings::set_has_exposure_clk_dts() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Settings::clear_has_exposure_clk_dts() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Settings::clear_exposure_clk_dts() {
  exposure_clk_dts_ = 0u;
  clear_has_exposure_clk_dts();
}
inline ::google::protobuf::uint32 Settings::exposure_clk_dts() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Settings.exposure_clk_dts)
  return exposure_clk_dts_;
}
inline void Settings::set_exposure_clk_dts(::google::protobuf::uint32 value) {
  set_has_exposure_clk_dts();
  exposure_clk_dts_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Settings.exposure_clk_dts)
}

// optional double t1 = 11;
inline bool Settings::has_t1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Settings::set_has_t1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Settings::clear_has_t1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Settings::clear_t1() {
  t1_ = 0;
  clear_has_t1();
}
inline double Settings::t1() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Settings.t1)
  return t1_;
}
inline void Settings::set_t1(double value) {
  set_has_t1();
  t1_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Settings.t1)
}

// optional uint32 t1_clk_dts = 12;
inline bool Settings::has_t1_clk_dts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Settings::set_has_t1_clk_dts() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Settings::clear_has_t1_clk_dts() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Settings::clear_t1_clk_dts() {
  t1_clk_dts_ = 0u;
  clear_has_t1_clk_dts();
}
inline ::google::protobuf::uint32 Settings::t1_clk_dts() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Settings.t1_clk_dts)
  return t1_clk_dts_;
}
inline void Settings::set_t1_clk_dts(::google::protobuf::uint32 value) {
  set_has_t1_clk_dts();
  t1_clk_dts_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Settings.t1_clk_dts)
}

// -------------------------------------------------------------------

// Data

// optional .dolphindaq.linecam.Image image = 1;
inline bool Data::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_image() {
  if (image_ != NULL) image_->Clear();
  clear_has_image();
}
inline const ::dolphindaq::linecam::Image& Data::_internal_image() const {
  return *image_;
}
inline const ::dolphindaq::linecam::Image& Data::image() const {
  const ::dolphindaq::linecam::Image* p = image_;
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Data.image)
  return p != NULL ? *p : *reinterpret_cast<const ::dolphindaq::linecam::Image*>(
      &::dolphindaq::linecam::_Image_default_instance_);
}
inline ::dolphindaq::linecam::Image* Data::release_image() {
  // @@protoc_insertion_point(field_release:dolphindaq.linecam.Data.image)
  clear_has_image();
  ::dolphindaq::linecam::Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline ::dolphindaq::linecam::Image* Data::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    auto* p = CreateMaybeMessage<::dolphindaq::linecam::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dolphindaq.linecam.Data.image)
  return image_;
}
inline void Data::set_allocated_image(::dolphindaq::linecam::Image* image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_;
  }
  if (image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
  } else {
    clear_has_image();
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.linecam.Data.image)
}

// optional .dolphindaq.linecam.Metrics metrics = 2;
inline bool Data::has_metrics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_metrics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_metrics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_metrics() {
  if (metrics_ != NULL) metrics_->Clear();
  clear_has_metrics();
}
inline const ::dolphindaq::linecam::Metrics& Data::_internal_metrics() const {
  return *metrics_;
}
inline const ::dolphindaq::linecam::Metrics& Data::metrics() const {
  const ::dolphindaq::linecam::Metrics* p = metrics_;
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Data.metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::dolphindaq::linecam::Metrics*>(
      &::dolphindaq::linecam::_Metrics_default_instance_);
}
inline ::dolphindaq::linecam::Metrics* Data::release_metrics() {
  // @@protoc_insertion_point(field_release:dolphindaq.linecam.Data.metrics)
  clear_has_metrics();
  ::dolphindaq::linecam::Metrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
inline ::dolphindaq::linecam::Metrics* Data::mutable_metrics() {
  set_has_metrics();
  if (metrics_ == NULL) {
    auto* p = CreateMaybeMessage<::dolphindaq::linecam::Metrics>(GetArenaNoVirtual());
    metrics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dolphindaq.linecam.Data.metrics)
  return metrics_;
}
inline void Data::set_allocated_metrics(::dolphindaq::linecam::Metrics* metrics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metrics_;
  }
  if (metrics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      metrics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metrics, submessage_arena);
    }
    set_has_metrics();
  } else {
    clear_has_metrics();
  }
  metrics_ = metrics;
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.linecam.Data.metrics)
}

// -------------------------------------------------------------------

// Image

// optional uint64 shot_num = 1;
inline bool Image::has_shot_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_shot_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_shot_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_shot_num() {
  shot_num_ = GOOGLE_ULONGLONG(0);
  clear_has_shot_num();
}
inline ::google::protobuf::uint64 Image::shot_num() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Image.shot_num)
  return shot_num_;
}
inline void Image::set_shot_num(::google::protobuf::uint64 value) {
  set_has_shot_num();
  shot_num_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Image.shot_num)
}

// optional .google.protobuf.Timestamp shot_time = 2;
inline bool Image::has_shot_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_shot_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_shot_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::google::protobuf::Timestamp& Image::_internal_shot_time() const {
  return *shot_time_;
}
inline const ::google::protobuf::Timestamp& Image::shot_time() const {
  const ::google::protobuf::Timestamp* p = shot_time_;
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Image.shot_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Image::release_shot_time() {
  // @@protoc_insertion_point(field_release:dolphindaq.linecam.Image.shot_time)
  clear_has_shot_time();
  ::google::protobuf::Timestamp* temp = shot_time_;
  shot_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Image::mutable_shot_time() {
  set_has_shot_time();
  if (shot_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    shot_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dolphindaq.linecam.Image.shot_time)
  return shot_time_;
}
inline void Image::set_allocated_shot_time(::google::protobuf::Timestamp* shot_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(shot_time_);
  }
  if (shot_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(shot_time)->GetArena();
    if (message_arena != submessage_arena) {
      shot_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shot_time, submessage_arena);
    }
    set_has_shot_time();
  } else {
    clear_has_shot_time();
  }
  shot_time_ = shot_time;
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.linecam.Image.shot_time)
}

// optional uint64 shot_time_alt_nanos = 3;
inline bool Image::has_shot_time_alt_nanos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_shot_time_alt_nanos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_shot_time_alt_nanos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_shot_time_alt_nanos() {
  shot_time_alt_nanos_ = GOOGLE_ULONGLONG(0);
  clear_has_shot_time_alt_nanos();
}
inline ::google::protobuf::uint64 Image::shot_time_alt_nanos() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Image.shot_time_alt_nanos)
  return shot_time_alt_nanos_;
}
inline void Image::set_shot_time_alt_nanos(::google::protobuf::uint64 value) {
  set_has_shot_time_alt_nanos();
  shot_time_alt_nanos_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Image.shot_time_alt_nanos)
}

// optional bytes yvals = 4;
inline bool Image::has_yvals() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_yvals() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_yvals() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_yvals() {
  yvals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_yvals();
}
inline const ::std::string& Image::yvals() const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Image.yvals)
  return yvals_.GetNoArena();
}
inline void Image::set_yvals(const ::std::string& value) {
  set_has_yvals();
  yvals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Image.yvals)
}
#if LANG_CXX11
inline void Image::set_yvals(::std::string&& value) {
  set_has_yvals();
  yvals_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dolphindaq.linecam.Image.yvals)
}
#endif
inline void Image::set_yvals(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_yvals();
  yvals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dolphindaq.linecam.Image.yvals)
}
inline void Image::set_yvals(const void* value, size_t size) {
  set_has_yvals();
  yvals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dolphindaq.linecam.Image.yvals)
}
inline ::std::string* Image::mutable_yvals() {
  set_has_yvals();
  // @@protoc_insertion_point(field_mutable:dolphindaq.linecam.Image.yvals)
  return yvals_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_yvals() {
  // @@protoc_insertion_point(field_release:dolphindaq.linecam.Image.yvals)
  if (!has_yvals()) {
    return NULL;
  }
  clear_has_yvals();
  return yvals_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_yvals(::std::string* yvals) {
  if (yvals != NULL) {
    set_has_yvals();
  } else {
    clear_has_yvals();
  }
  yvals_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), yvals);
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.linecam.Image.yvals)
}

// -------------------------------------------------------------------

// Metrics

// repeated uint64 shot_num = 1;
inline int Metrics::shot_num_size() const {
  return shot_num_.size();
}
inline void Metrics::clear_shot_num() {
  shot_num_.Clear();
}
inline ::google::protobuf::uint64 Metrics::shot_num(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Metrics.shot_num)
  return shot_num_.Get(index);
}
inline void Metrics::set_shot_num(int index, ::google::protobuf::uint64 value) {
  shot_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Metrics.shot_num)
}
inline void Metrics::add_shot_num(::google::protobuf::uint64 value) {
  shot_num_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.linecam.Metrics.shot_num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Metrics::shot_num() const {
  // @@protoc_insertion_point(field_list:dolphindaq.linecam.Metrics.shot_num)
  return shot_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Metrics::mutable_shot_num() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.linecam.Metrics.shot_num)
  return &shot_num_;
}

// repeated .google.protobuf.Timestamp shot_time = 2;
inline int Metrics::shot_time_size() const {
  return shot_time_.size();
}
inline ::google::protobuf::Timestamp* Metrics::mutable_shot_time(int index) {
  // @@protoc_insertion_point(field_mutable:dolphindaq.linecam.Metrics.shot_time)
  return shot_time_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >*
Metrics::mutable_shot_time() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.linecam.Metrics.shot_time)
  return &shot_time_;
}
inline const ::google::protobuf::Timestamp& Metrics::shot_time(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Metrics.shot_time)
  return shot_time_.Get(index);
}
inline ::google::protobuf::Timestamp* Metrics::add_shot_time() {
  // @@protoc_insertion_point(field_add:dolphindaq.linecam.Metrics.shot_time)
  return shot_time_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >&
Metrics::shot_time() const {
  // @@protoc_insertion_point(field_list:dolphindaq.linecam.Metrics.shot_time)
  return shot_time_;
}

// repeated int64 shot_time_seconds = 3;
inline int Metrics::shot_time_seconds_size() const {
  return shot_time_seconds_.size();
}
inline void Metrics::clear_shot_time_seconds() {
  shot_time_seconds_.Clear();
}
inline ::google::protobuf::int64 Metrics::shot_time_seconds(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Metrics.shot_time_seconds)
  return shot_time_seconds_.Get(index);
}
inline void Metrics::set_shot_time_seconds(int index, ::google::protobuf::int64 value) {
  shot_time_seconds_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Metrics.shot_time_seconds)
}
inline void Metrics::add_shot_time_seconds(::google::protobuf::int64 value) {
  shot_time_seconds_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.linecam.Metrics.shot_time_seconds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Metrics::shot_time_seconds() const {
  // @@protoc_insertion_point(field_list:dolphindaq.linecam.Metrics.shot_time_seconds)
  return shot_time_seconds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Metrics::mutable_shot_time_seconds() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.linecam.Metrics.shot_time_seconds)
  return &shot_time_seconds_;
}

// repeated int32 shot_time_nanos = 4;
inline int Metrics::shot_time_nanos_size() const {
  return shot_time_nanos_.size();
}
inline void Metrics::clear_shot_time_nanos() {
  shot_time_nanos_.Clear();
}
inline ::google::protobuf::int32 Metrics::shot_time_nanos(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Metrics.shot_time_nanos)
  return shot_time_nanos_.Get(index);
}
inline void Metrics::set_shot_time_nanos(int index, ::google::protobuf::int32 value) {
  shot_time_nanos_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Metrics.shot_time_nanos)
}
inline void Metrics::add_shot_time_nanos(::google::protobuf::int32 value) {
  shot_time_nanos_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.linecam.Metrics.shot_time_nanos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Metrics::shot_time_nanos() const {
  // @@protoc_insertion_point(field_list:dolphindaq.linecam.Metrics.shot_time_nanos)
  return shot_time_nanos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Metrics::mutable_shot_time_nanos() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.linecam.Metrics.shot_time_nanos)
  return &shot_time_nanos_;
}

// repeated uint64 shot_time_alt_nanos = 5;
inline int Metrics::shot_time_alt_nanos_size() const {
  return shot_time_alt_nanos_.size();
}
inline void Metrics::clear_shot_time_alt_nanos() {
  shot_time_alt_nanos_.Clear();
}
inline ::google::protobuf::uint64 Metrics::shot_time_alt_nanos(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Metrics.shot_time_alt_nanos)
  return shot_time_alt_nanos_.Get(index);
}
inline void Metrics::set_shot_time_alt_nanos(int index, ::google::protobuf::uint64 value) {
  shot_time_alt_nanos_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Metrics.shot_time_alt_nanos)
}
inline void Metrics::add_shot_time_alt_nanos(::google::protobuf::uint64 value) {
  shot_time_alt_nanos_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.linecam.Metrics.shot_time_alt_nanos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Metrics::shot_time_alt_nanos() const {
  // @@protoc_insertion_point(field_list:dolphindaq.linecam.Metrics.shot_time_alt_nanos)
  return shot_time_alt_nanos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Metrics::mutable_shot_time_alt_nanos() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.linecam.Metrics.shot_time_alt_nanos)
  return &shot_time_alt_nanos_;
}

// repeated uint64 image_sum = 6;
inline int Metrics::image_sum_size() const {
  return image_sum_.size();
}
inline void Metrics::clear_image_sum() {
  image_sum_.Clear();
}
inline ::google::protobuf::uint64 Metrics::image_sum(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Metrics.image_sum)
  return image_sum_.Get(index);
}
inline void Metrics::set_image_sum(int index, ::google::protobuf::uint64 value) {
  image_sum_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Metrics.image_sum)
}
inline void Metrics::add_image_sum(::google::protobuf::uint64 value) {
  image_sum_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.linecam.Metrics.image_sum)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Metrics::image_sum() const {
  // @@protoc_insertion_point(field_list:dolphindaq.linecam.Metrics.image_sum)
  return image_sum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Metrics::mutable_image_sum() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.linecam.Metrics.image_sum)
  return &image_sum_;
}

// repeated double image_mean = 7;
inline int Metrics::image_mean_size() const {
  return image_mean_.size();
}
inline void Metrics::clear_image_mean() {
  image_mean_.Clear();
}
inline double Metrics::image_mean(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Metrics.image_mean)
  return image_mean_.Get(index);
}
inline void Metrics::set_image_mean(int index, double value) {
  image_mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Metrics.image_mean)
}
inline void Metrics::add_image_mean(double value) {
  image_mean_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.linecam.Metrics.image_mean)
}
inline const ::google::protobuf::RepeatedField< double >&
Metrics::image_mean() const {
  // @@protoc_insertion_point(field_list:dolphindaq.linecam.Metrics.image_mean)
  return image_mean_;
}
inline ::google::protobuf::RepeatedField< double >*
Metrics::mutable_image_mean() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.linecam.Metrics.image_mean)
  return &image_mean_;
}

// repeated uint64 image_max = 8;
inline int Metrics::image_max_size() const {
  return image_max_.size();
}
inline void Metrics::clear_image_max() {
  image_max_.Clear();
}
inline ::google::protobuf::uint64 Metrics::image_max(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Metrics.image_max)
  return image_max_.Get(index);
}
inline void Metrics::set_image_max(int index, ::google::protobuf::uint64 value) {
  image_max_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Metrics.image_max)
}
inline void Metrics::add_image_max(::google::protobuf::uint64 value) {
  image_max_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.linecam.Metrics.image_max)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Metrics::image_max() const {
  // @@protoc_insertion_point(field_list:dolphindaq.linecam.Metrics.image_max)
  return image_max_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Metrics::mutable_image_max() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.linecam.Metrics.image_max)
  return &image_max_;
}

// repeated uint64 image_min = 9;
inline int Metrics::image_min_size() const {
  return image_min_.size();
}
inline void Metrics::clear_image_min() {
  image_min_.Clear();
}
inline ::google::protobuf::uint64 Metrics::image_min(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Metrics.image_min)
  return image_min_.Get(index);
}
inline void Metrics::set_image_min(int index, ::google::protobuf::uint64 value) {
  image_min_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Metrics.image_min)
}
inline void Metrics::add_image_min(::google::protobuf::uint64 value) {
  image_min_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.linecam.Metrics.image_min)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Metrics::image_min() const {
  // @@protoc_insertion_point(field_list:dolphindaq.linecam.Metrics.image_min)
  return image_min_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Metrics::mutable_image_min() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.linecam.Metrics.image_min)
  return &image_min_;
}

// repeated double image_custom = 10;
inline int Metrics::image_custom_size() const {
  return image_custom_.size();
}
inline void Metrics::clear_image_custom() {
  image_custom_.Clear();
}
inline double Metrics::image_custom(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.linecam.Metrics.image_custom)
  return image_custom_.Get(index);
}
inline void Metrics::set_image_custom(int index, double value) {
  image_custom_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.linecam.Metrics.image_custom)
}
inline void Metrics::add_image_custom(double value) {
  image_custom_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.linecam.Metrics.image_custom)
}
inline const ::google::protobuf::RepeatedField< double >&
Metrics::image_custom() const {
  // @@protoc_insertion_point(field_list:dolphindaq.linecam.Metrics.image_custom)
  return image_custom_;
}
inline ::google::protobuf::RepeatedField< double >*
Metrics::mutable_image_custom() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.linecam.Metrics.image_custom)
  return &image_custom_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace linecam
}  // namespace dolphindaq

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_linecam_2eproto
