// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diode.proto

#include "diode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_diode_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diode_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Metrics;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diode_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Trace;
}  // namespace protobuf_diode_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace dolphindaq {
namespace diode {
class SettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Settings>
      _instance;
} _Settings_default_instance_;
class DataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Data>
      _instance;
} _Data_default_instance_;
class TraceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trace>
      _instance;
} _Trace_default_instance_;
class MetricsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Metrics>
      _instance;
} _Metrics_default_instance_;
}  // namespace diode
}  // namespace dolphindaq
namespace protobuf_diode_2eproto {
static void InitDefaultsSettings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dolphindaq::diode::_Settings_default_instance_;
    new (ptr) ::dolphindaq::diode::Settings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dolphindaq::diode::Settings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Settings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSettings}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dolphindaq::diode::_Data_default_instance_;
    new (ptr) ::dolphindaq::diode::Data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dolphindaq::diode::Data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsData}, {
      &protobuf_diode_2eproto::scc_info_Trace.base,
      &protobuf_diode_2eproto::scc_info_Metrics.base,}};

static void InitDefaultsTrace() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dolphindaq::diode::_Trace_default_instance_;
    new (ptr) ::dolphindaq::diode::Trace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dolphindaq::diode::Trace::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Trace =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrace}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsMetrics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dolphindaq::diode::_Metrics_default_instance_;
    new (ptr) ::dolphindaq::diode::Metrics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dolphindaq::diode::Metrics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Metrics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMetrics}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Settings.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Data.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Trace.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Metrics.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, start_shot_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, trace_tvals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, trace_dt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, trace_nt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, trace_ymin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, trace_ymax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, metrics_batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, dt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, t1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, t2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, t3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, t4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, timtick_secs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, dt_timticks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, t1_dts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, t2_dts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, t3_dts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Settings, t4_dts_),
  1,
  0,
  ~0u,
  2,
  4,
  3,
  6,
  5,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Data, trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Data, metrics_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Trace, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Trace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Trace, shot_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Trace, shot_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Trace, yvals_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, shot_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, shot_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, shot_time_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, shot_time_nanos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, shot_time_alt_nanos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, global_sum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, global_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, global_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, global_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, global_peak5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, bg_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, signal_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, signal_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, reduced_integ_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, reduced_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, reduced_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::diode::Metrics, custom_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, sizeof(::dolphindaq::diode::Settings)},
  { 43, 50, sizeof(::dolphindaq::diode::Data)},
  { 52, 60, sizeof(::dolphindaq::diode::Trace)},
  { 63, 85, sizeof(::dolphindaq::diode::Metrics)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::dolphindaq::diode::_Settings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dolphindaq::diode::_Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dolphindaq::diode::_Trace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dolphindaq::diode::_Metrics_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diode.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013diode.proto\022\020dolphindaq.diode\032\037google/"
      "protobuf/timestamp.proto\"\366\002\n\010Settings\022\026\n"
      "\016start_shot_num\030\001 \001(\004\022.\n\nstart_time\030\002 \001("
      "\0132\032.google.protobuf.Timestamp\022\023\n\013trace_t"
      "vals\030\003 \003(\001\022\020\n\010trace_dt\030\004 \001(\001\022\020\n\010trace_nt"
      "\030\005 \001(\r\022\022\n\ntrace_ymin\030\006 \001(\001\022\022\n\ntrace_ymax"
      "\030\007 \001(\001\022\032\n\022metrics_batch_size\030\010 \001(\r\022\n\n\002dt"
      "\030\t \001(\001\022\n\n\002t1\030\n \001(\001\022\n\n\002t2\030\013 \001(\001\022\n\n\002t3\030\014 \001"
      "(\001\022\n\n\002t4\030\r \001(\001\022\024\n\014timtick_secs\030\016 \001(\001\022\023\n\013"
      "dt_timticks\030\017 \001(\r\022\016\n\006t1_dts\030\020 \001(\r\022\016\n\006t2_"
      "dts\030\021 \001(\r\022\016\n\006t3_dts\030\022 \001(\r\022\016\n\006t4_dts\030\023 \001("
      "\r\"Z\n\004Data\022&\n\005trace\030\001 \001(\0132\027.dolphindaq.di"
      "ode.Trace\022*\n\007metrics\030\002 \001(\0132\031.dolphindaq."
      "diode.Metrics\"W\n\005Trace\022\020\n\010shot_num\030\001 \001(\004"
      "\022-\n\tshot_time\030\002 \001(\0132\032.google.protobuf.Ti"
      "mestamp\022\r\n\005yvals\030\003 \001(\014\"\216\003\n\007Metrics\022\020\n\010sh"
      "ot_num\030\001 \003(\004\022-\n\tshot_time\030\002 \003(\0132\032.google"
      ".protobuf.Timestamp\022\031\n\021shot_time_seconds"
      "\030\003 \003(\003\022\027\n\017shot_time_nanos\030\004 \003(\005\022\033\n\023shot_"
      "time_alt_nanos\030\005 \003(\004\022\022\n\nglobal_sum\030\006 \003(\004"
      "\022\023\n\013global_mean\030\007 \003(\001\022\022\n\nglobal_max\030\010 \003("
      "\004\022\022\n\nglobal_min\030\t \003(\004\022\024\n\014global_peak5\030\n "
      "\003(\004\022\017\n\007bg_mean\030\013 \003(\001\022\023\n\013signal_mean\030\014 \003("
      "\001\022\022\n\nsignal_max\030\r \003(\001\022\025\n\rreduced_integ\030\016"
      " \003(\001\022\024\n\014reduced_mean\030\017 \003(\001\022\023\n\013reduced_ma"
      "x\030\020 \003(\001\022\016\n\006custom\030\021 \003(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1023);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diode.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diode_2eproto
namespace dolphindaq {
namespace diode {

// ===================================================================

void Settings::InitAsDefaultInstance() {
  ::dolphindaq::diode::_Settings_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Settings::clear_start_time() {
  if (start_time_ != NULL) start_time_->Clear();
  clear_has_start_time();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Settings::kStartShotNumFieldNumber;
const int Settings::kStartTimeFieldNumber;
const int Settings::kTraceTvalsFieldNumber;
const int Settings::kTraceDtFieldNumber;
const int Settings::kTraceNtFieldNumber;
const int Settings::kTraceYminFieldNumber;
const int Settings::kTraceYmaxFieldNumber;
const int Settings::kMetricsBatchSizeFieldNumber;
const int Settings::kDtFieldNumber;
const int Settings::kT1FieldNumber;
const int Settings::kT2FieldNumber;
const int Settings::kT3FieldNumber;
const int Settings::kT4FieldNumber;
const int Settings::kTimtickSecsFieldNumber;
const int Settings::kDtTimticksFieldNumber;
const int Settings::kT1DtsFieldNumber;
const int Settings::kT2DtsFieldNumber;
const int Settings::kT3DtsFieldNumber;
const int Settings::kT4DtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Settings::Settings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diode_2eproto::scc_info_Settings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dolphindaq.diode.Settings)
}
Settings::Settings(const Settings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      trace_tvals_(from.trace_tvals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  ::memcpy(&start_shot_num_, &from.start_shot_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&t4_dts_) -
    reinterpret_cast<char*>(&start_shot_num_)) + sizeof(t4_dts_));
  // @@protoc_insertion_point(copy_constructor:dolphindaq.diode.Settings)
}

void Settings::SharedCtor() {
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t4_dts_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(t4_dts_));
}

Settings::~Settings() {
  // @@protoc_insertion_point(destructor:dolphindaq.diode.Settings)
  SharedDtor();
}

void Settings::SharedDtor() {
  if (this != internal_default_instance()) delete start_time_;
}

void Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Settings::descriptor() {
  ::protobuf_diode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Settings& Settings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diode_2eproto::scc_info_Settings.base);
  return *internal_default_instance();
}


void Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:dolphindaq.diode.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trace_tvals_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(start_time_ != NULL);
    start_time_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&start_shot_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dt_) -
        reinterpret_cast<char*>(&start_shot_num_)) + sizeof(dt_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&t1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&t2_dts_) -
        reinterpret_cast<char*>(&t1_)) + sizeof(t2_dts_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&t3_dts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&t4_dts_) -
        reinterpret_cast<char*>(&t3_dts_)) + sizeof(t4_dts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Settings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dolphindaq.diode.Settings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_shot_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_start_shot_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_shot_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double trace_tvals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_trace_tvals())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_trace_tvals())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double trace_dt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_trace_dt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trace_dt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trace_nt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_trace_nt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trace_nt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double trace_ymin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_trace_ymin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trace_ymin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double trace_ymax = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_trace_ymax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trace_ymax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 metrics_batch_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_metrics_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metrics_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dt = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_dt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t1 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_t1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_t2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t3 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_t3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t4 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_t4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timtick_secs = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_timtick_secs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timtick_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dt_timticks = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_dt_timticks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dt_timticks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 t1_dts = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_t1_dts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t1_dts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 t2_dts = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_t2_dts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t2_dts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 t3_dts = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_t3_dts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t3_dts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 t4_dts = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_t4_dts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t4_dts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dolphindaq.diode.Settings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dolphindaq.diode.Settings)
  return false;
#undef DO_
}

void Settings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dolphindaq.diode.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_shot_num = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_shot_num(), output);
  }

  // optional .google.protobuf.Timestamp start_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_start_time(), output);
  }

  // repeated double trace_tvals = 3;
  for (int i = 0, n = this->trace_tvals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->trace_tvals(i), output);
  }

  // optional double trace_dt = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->trace_dt(), output);
  }

  // optional uint32 trace_nt = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->trace_nt(), output);
  }

  // optional double trace_ymin = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->trace_ymin(), output);
  }

  // optional double trace_ymax = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->trace_ymax(), output);
  }

  // optional uint32 metrics_batch_size = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->metrics_batch_size(), output);
  }

  // optional double dt = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->dt(), output);
  }

  // optional double t1 = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->t1(), output);
  }

  // optional double t2 = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->t2(), output);
  }

  // optional double t3 = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->t3(), output);
  }

  // optional double t4 = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->t4(), output);
  }

  // optional double timtick_secs = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->timtick_secs(), output);
  }

  // optional uint32 dt_timticks = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dt_timticks(), output);
  }

  // optional uint32 t1_dts = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->t1_dts(), output);
  }

  // optional uint32 t2_dts = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->t2_dts(), output);
  }

  // optional uint32 t3_dts = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->t3_dts(), output);
  }

  // optional uint32 t4_dts = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->t4_dts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dolphindaq.diode.Settings)
}

::google::protobuf::uint8* Settings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dolphindaq.diode.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_shot_num = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_shot_num(), target);
  }

  // optional .google.protobuf.Timestamp start_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_start_time(), deterministic, target);
  }

  // repeated double trace_tvals = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->trace_tvals_, target);

  // optional double trace_dt = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->trace_dt(), target);
  }

  // optional uint32 trace_nt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->trace_nt(), target);
  }

  // optional double trace_ymin = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->trace_ymin(), target);
  }

  // optional double trace_ymax = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->trace_ymax(), target);
  }

  // optional uint32 metrics_batch_size = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->metrics_batch_size(), target);
  }

  // optional double dt = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->dt(), target);
  }

  // optional double t1 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->t1(), target);
  }

  // optional double t2 = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->t2(), target);
  }

  // optional double t3 = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->t3(), target);
  }

  // optional double t4 = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->t4(), target);
  }

  // optional double timtick_secs = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->timtick_secs(), target);
  }

  // optional uint32 dt_timticks = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dt_timticks(), target);
  }

  // optional uint32 t1_dts = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->t1_dts(), target);
  }

  // optional uint32 t2_dts = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->t2_dts(), target);
  }

  // optional uint32 t3_dts = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->t3_dts(), target);
  }

  // optional uint32 t4_dts = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->t4_dts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dolphindaq.diode.Settings)
  return target;
}

size_t Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dolphindaq.diode.Settings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double trace_tvals = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->trace_tvals_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->trace_tvals_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .google.protobuf.Timestamp start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *start_time_);
    }

    // optional uint64 start_shot_num = 1;
    if (has_start_shot_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_shot_num());
    }

    // optional double trace_dt = 4;
    if (has_trace_dt()) {
      total_size += 1 + 8;
    }

    // optional double trace_ymin = 6;
    if (has_trace_ymin()) {
      total_size += 1 + 8;
    }

    // optional uint32 trace_nt = 5;
    if (has_trace_nt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trace_nt());
    }

    // optional uint32 metrics_batch_size = 8;
    if (has_metrics_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->metrics_batch_size());
    }

    // optional double trace_ymax = 7;
    if (has_trace_ymax()) {
      total_size += 1 + 8;
    }

    // optional double dt = 9;
    if (has_dt()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double t1 = 10;
    if (has_t1()) {
      total_size += 1 + 8;
    }

    // optional double t2 = 11;
    if (has_t2()) {
      total_size += 1 + 8;
    }

    // optional double t3 = 12;
    if (has_t3()) {
      total_size += 1 + 8;
    }

    // optional double t4 = 13;
    if (has_t4()) {
      total_size += 1 + 8;
    }

    // optional double timtick_secs = 14;
    if (has_timtick_secs()) {
      total_size += 1 + 8;
    }

    // optional uint32 dt_timticks = 15;
    if (has_dt_timticks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dt_timticks());
    }

    // optional uint32 t1_dts = 16;
    if (has_t1_dts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t1_dts());
    }

    // optional uint32 t2_dts = 17;
    if (has_t2_dts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t2_dts());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional uint32 t3_dts = 18;
    if (has_t3_dts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t3_dts());
    }

    // optional uint32 t4_dts = 19;
    if (has_t4_dts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t4_dts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Settings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dolphindaq.diode.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  const Settings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Settings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dolphindaq.diode.Settings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dolphindaq.diode.Settings)
    MergeFrom(*source);
  }
}

void Settings::MergeFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dolphindaq.diode.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trace_tvals_.MergeFrom(from.trace_tvals_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
    }
    if (cached_has_bits & 0x00000002u) {
      start_shot_num_ = from.start_shot_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      trace_dt_ = from.trace_dt_;
    }
    if (cached_has_bits & 0x00000008u) {
      trace_ymin_ = from.trace_ymin_;
    }
    if (cached_has_bits & 0x00000010u) {
      trace_nt_ = from.trace_nt_;
    }
    if (cached_has_bits & 0x00000020u) {
      metrics_batch_size_ = from.metrics_batch_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      trace_ymax_ = from.trace_ymax_;
    }
    if (cached_has_bits & 0x00000080u) {
      dt_ = from.dt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      t1_ = from.t1_;
    }
    if (cached_has_bits & 0x00000200u) {
      t2_ = from.t2_;
    }
    if (cached_has_bits & 0x00000400u) {
      t3_ = from.t3_;
    }
    if (cached_has_bits & 0x00000800u) {
      t4_ = from.t4_;
    }
    if (cached_has_bits & 0x00001000u) {
      timtick_secs_ = from.timtick_secs_;
    }
    if (cached_has_bits & 0x00002000u) {
      dt_timticks_ = from.dt_timticks_;
    }
    if (cached_has_bits & 0x00004000u) {
      t1_dts_ = from.t1_dts_;
    }
    if (cached_has_bits & 0x00008000u) {
      t2_dts_ = from.t2_dts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      t3_dts_ = from.t3_dts_;
    }
    if (cached_has_bits & 0x00020000u) {
      t4_dts_ = from.t4_dts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Settings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dolphindaq.diode.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settings::CopyFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dolphindaq.diode.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {
  return true;
}

void Settings::Swap(Settings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Settings::InternalSwap(Settings* other) {
  using std::swap;
  trace_tvals_.InternalSwap(&other->trace_tvals_);
  swap(start_time_, other->start_time_);
  swap(start_shot_num_, other->start_shot_num_);
  swap(trace_dt_, other->trace_dt_);
  swap(trace_ymin_, other->trace_ymin_);
  swap(trace_nt_, other->trace_nt_);
  swap(metrics_batch_size_, other->metrics_batch_size_);
  swap(trace_ymax_, other->trace_ymax_);
  swap(dt_, other->dt_);
  swap(t1_, other->t1_);
  swap(t2_, other->t2_);
  swap(t3_, other->t3_);
  swap(t4_, other->t4_);
  swap(timtick_secs_, other->timtick_secs_);
  swap(dt_timticks_, other->dt_timticks_);
  swap(t1_dts_, other->t1_dts_);
  swap(t2_dts_, other->t2_dts_);
  swap(t3_dts_, other->t3_dts_);
  swap(t4_dts_, other->t4_dts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Settings::GetMetadata() const {
  protobuf_diode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Data::InitAsDefaultInstance() {
  ::dolphindaq::diode::_Data_default_instance_._instance.get_mutable()->trace_ = const_cast< ::dolphindaq::diode::Trace*>(
      ::dolphindaq::diode::Trace::internal_default_instance());
  ::dolphindaq::diode::_Data_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::dolphindaq::diode::Metrics*>(
      ::dolphindaq::diode::Metrics::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kTraceFieldNumber;
const int Data::kMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diode_2eproto::scc_info_Data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dolphindaq.diode.Data)
}
Data::Data(const Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trace()) {
    trace_ = new ::dolphindaq::diode::Trace(*from.trace_);
  } else {
    trace_ = NULL;
  }
  if (from.has_metrics()) {
    metrics_ = new ::dolphindaq::diode::Metrics(*from.metrics_);
  } else {
    metrics_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dolphindaq.diode.Data)
}

void Data::SharedCtor() {
  ::memset(&trace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metrics_) -
      reinterpret_cast<char*>(&trace_)) + sizeof(metrics_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:dolphindaq.diode.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != internal_default_instance()) delete trace_;
  if (this != internal_default_instance()) delete metrics_;
}

void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  ::protobuf_diode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Data& Data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diode_2eproto::scc_info_Data.base);
  return *internal_default_instance();
}


void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:dolphindaq.diode.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(trace_ != NULL);
      trace_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(metrics_ != NULL);
      metrics_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dolphindaq.diode.Data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dolphindaq.diode.Trace trace = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dolphindaq.diode.Metrics metrics = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dolphindaq.diode.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dolphindaq.diode.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dolphindaq.diode.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .dolphindaq.diode.Trace trace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_trace(), output);
  }

  // optional .dolphindaq.diode.Metrics metrics = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_metrics(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dolphindaq.diode.Data)
}

::google::protobuf::uint8* Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dolphindaq.diode.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .dolphindaq.diode.Trace trace = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_trace(), deterministic, target);
  }

  // optional .dolphindaq.diode.Metrics metrics = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_metrics(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dolphindaq.diode.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dolphindaq.diode.Data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .dolphindaq.diode.Trace trace = 1;
    if (has_trace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trace_);
    }

    // optional .dolphindaq.diode.Metrics metrics = 2;
    if (has_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *metrics_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dolphindaq.diode.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dolphindaq.diode.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dolphindaq.diode.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dolphindaq.diode.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trace()->::dolphindaq::diode::Trace::MergeFrom(from.trace());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_metrics()->::dolphindaq::diode::Metrics::MergeFrom(from.metrics());
    }
  }
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dolphindaq.diode.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dolphindaq.diode.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  using std::swap;
  swap(trace_, other->trace_);
  swap(metrics_, other->metrics_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_diode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Trace::InitAsDefaultInstance() {
  ::dolphindaq::diode::_Trace_default_instance_._instance.get_mutable()->shot_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Trace::clear_shot_time() {
  if (shot_time_ != NULL) shot_time_->Clear();
  clear_has_shot_time();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trace::kShotNumFieldNumber;
const int Trace::kShotTimeFieldNumber;
const int Trace::kYvalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trace::Trace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diode_2eproto::scc_info_Trace.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dolphindaq.diode.Trace)
}
Trace::Trace(const Trace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  yvals_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_yvals()) {
    yvals_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yvals_);
  }
  if (from.has_shot_time()) {
    shot_time_ = new ::google::protobuf::Timestamp(*from.shot_time_);
  } else {
    shot_time_ = NULL;
  }
  shot_num_ = from.shot_num_;
  // @@protoc_insertion_point(copy_constructor:dolphindaq.diode.Trace)
}

void Trace::SharedCtor() {
  yvals_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&shot_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shot_num_) -
      reinterpret_cast<char*>(&shot_time_)) + sizeof(shot_num_));
}

Trace::~Trace() {
  // @@protoc_insertion_point(destructor:dolphindaq.diode.Trace)
  SharedDtor();
}

void Trace::SharedDtor() {
  yvals_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shot_time_;
}

void Trace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Trace::descriptor() {
  ::protobuf_diode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trace& Trace::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diode_2eproto::scc_info_Trace.base);
  return *internal_default_instance();
}


void Trace::Clear() {
// @@protoc_insertion_point(message_clear_start:dolphindaq.diode.Trace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      yvals_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shot_time_ != NULL);
      shot_time_->Clear();
    }
  }
  shot_num_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Trace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dolphindaq.diode.Trace)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 shot_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_shot_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shot_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp shot_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shot_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes yvals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_yvals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dolphindaq.diode.Trace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dolphindaq.diode.Trace)
  return false;
#undef DO_
}

void Trace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dolphindaq.diode.Trace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 shot_num = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->shot_num(), output);
  }

  // optional .google.protobuf.Timestamp shot_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_shot_time(), output);
  }

  // optional bytes yvals = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->yvals(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dolphindaq.diode.Trace)
}

::google::protobuf::uint8* Trace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dolphindaq.diode.Trace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 shot_num = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->shot_num(), target);
  }

  // optional .google.protobuf.Timestamp shot_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_shot_time(), deterministic, target);
  }

  // optional bytes yvals = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->yvals(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dolphindaq.diode.Trace)
  return target;
}

size_t Trace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dolphindaq.diode.Trace)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes yvals = 3;
    if (has_yvals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->yvals());
    }

    // optional .google.protobuf.Timestamp shot_time = 2;
    if (has_shot_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shot_time_);
    }

    // optional uint64 shot_num = 1;
    if (has_shot_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shot_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dolphindaq.diode.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  const Trace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dolphindaq.diode.Trace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dolphindaq.diode.Trace)
    MergeFrom(*source);
  }
}

void Trace::MergeFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dolphindaq.diode.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_yvals();
      yvals_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yvals_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_shot_time()->::google::protobuf::Timestamp::MergeFrom(from.shot_time());
    }
    if (cached_has_bits & 0x00000004u) {
      shot_num_ = from.shot_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Trace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dolphindaq.diode.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trace::CopyFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dolphindaq.diode.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trace::IsInitialized() const {
  return true;
}

void Trace::Swap(Trace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trace::InternalSwap(Trace* other) {
  using std::swap;
  yvals_.Swap(&other->yvals_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shot_time_, other->shot_time_);
  swap(shot_num_, other->shot_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Trace::GetMetadata() const {
  protobuf_diode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Metrics::InitAsDefaultInstance() {
}
void Metrics::clear_shot_time() {
  shot_time_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metrics::kShotNumFieldNumber;
const int Metrics::kShotTimeFieldNumber;
const int Metrics::kShotTimeSecondsFieldNumber;
const int Metrics::kShotTimeNanosFieldNumber;
const int Metrics::kShotTimeAltNanosFieldNumber;
const int Metrics::kGlobalSumFieldNumber;
const int Metrics::kGlobalMeanFieldNumber;
const int Metrics::kGlobalMaxFieldNumber;
const int Metrics::kGlobalMinFieldNumber;
const int Metrics::kGlobalPeak5FieldNumber;
const int Metrics::kBgMeanFieldNumber;
const int Metrics::kSignalMeanFieldNumber;
const int Metrics::kSignalMaxFieldNumber;
const int Metrics::kReducedIntegFieldNumber;
const int Metrics::kReducedMeanFieldNumber;
const int Metrics::kReducedMaxFieldNumber;
const int Metrics::kCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metrics::Metrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diode_2eproto::scc_info_Metrics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dolphindaq.diode.Metrics)
}
Metrics::Metrics(const Metrics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      shot_num_(from.shot_num_),
      shot_time_(from.shot_time_),
      shot_time_seconds_(from.shot_time_seconds_),
      shot_time_nanos_(from.shot_time_nanos_),
      shot_time_alt_nanos_(from.shot_time_alt_nanos_),
      global_sum_(from.global_sum_),
      global_mean_(from.global_mean_),
      global_max_(from.global_max_),
      global_min_(from.global_min_),
      global_peak5_(from.global_peak5_),
      bg_mean_(from.bg_mean_),
      signal_mean_(from.signal_mean_),
      signal_max_(from.signal_max_),
      reduced_integ_(from.reduced_integ_),
      reduced_mean_(from.reduced_mean_),
      reduced_max_(from.reduced_max_),
      custom_(from.custom_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dolphindaq.diode.Metrics)
}

void Metrics::SharedCtor() {
}

Metrics::~Metrics() {
  // @@protoc_insertion_point(destructor:dolphindaq.diode.Metrics)
  SharedDtor();
}

void Metrics::SharedDtor() {
}

void Metrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Metrics::descriptor() {
  ::protobuf_diode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Metrics& Metrics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diode_2eproto::scc_info_Metrics.base);
  return *internal_default_instance();
}


void Metrics::Clear() {
// @@protoc_insertion_point(message_clear_start:dolphindaq.diode.Metrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shot_num_.Clear();
  shot_time_.Clear();
  shot_time_seconds_.Clear();
  shot_time_nanos_.Clear();
  shot_time_alt_nanos_.Clear();
  global_sum_.Clear();
  global_mean_.Clear();
  global_max_.Clear();
  global_min_.Clear();
  global_peak5_.Clear();
  bg_mean_.Clear();
  signal_mean_.Clear();
  signal_max_.Clear();
  reduced_integ_.Clear();
  reduced_mean_.Clear();
  reduced_max_.Clear();
  custom_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Metrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dolphindaq.diode.Metrics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 shot_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_shot_num())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_shot_num())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Timestamp shot_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_shot_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 shot_time_seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24u, input, this->mutable_shot_time_seconds())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shot_time_seconds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 shot_time_nanos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_shot_time_nanos())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shot_time_nanos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 shot_time_alt_nanos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40u, input, this->mutable_shot_time_alt_nanos())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_shot_time_alt_nanos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 global_sum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48u, input, this->mutable_global_sum())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_global_sum())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double global_mean = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57u, input, this->mutable_global_mean())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_global_mean())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 global_max = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64u, input, this->mutable_global_max())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_global_max())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 global_min = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 72u, input, this->mutable_global_min())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_global_min())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 global_peak5 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 80u, input, this->mutable_global_peak5())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_global_peak5())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double bg_mean = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89u, input, this->mutable_bg_mean())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bg_mean())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double signal_mean = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 97u, input, this->mutable_signal_mean())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_signal_mean())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double signal_max = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 105u, input, this->mutable_signal_max())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_signal_max())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double reduced_integ = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 113u, input, this->mutable_reduced_integ())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_reduced_integ())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double reduced_mean = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 121u, input, this->mutable_reduced_mean())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_reduced_mean())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double reduced_max = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 129u, input, this->mutable_reduced_max())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_reduced_max())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double custom = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 137u, input, this->mutable_custom())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_custom())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dolphindaq.diode.Metrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dolphindaq.diode.Metrics)
  return false;
#undef DO_
}

void Metrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dolphindaq.diode.Metrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 shot_num = 1;
  for (int i = 0, n = this->shot_num_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->shot_num(i), output);
  }

  // repeated .google.protobuf.Timestamp shot_time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shot_time_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->shot_time(static_cast<int>(i)),
      output);
  }

  // repeated int64 shot_time_seconds = 3;
  for (int i = 0, n = this->shot_time_seconds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->shot_time_seconds(i), output);
  }

  // repeated int32 shot_time_nanos = 4;
  for (int i = 0, n = this->shot_time_nanos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->shot_time_nanos(i), output);
  }

  // repeated uint64 shot_time_alt_nanos = 5;
  for (int i = 0, n = this->shot_time_alt_nanos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->shot_time_alt_nanos(i), output);
  }

  // repeated uint64 global_sum = 6;
  for (int i = 0, n = this->global_sum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->global_sum(i), output);
  }

  // repeated double global_mean = 7;
  for (int i = 0, n = this->global_mean_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->global_mean(i), output);
  }

  // repeated uint64 global_max = 8;
  for (int i = 0, n = this->global_max_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->global_max(i), output);
  }

  // repeated uint64 global_min = 9;
  for (int i = 0, n = this->global_min_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      9, this->global_min(i), output);
  }

  // repeated uint64 global_peak5 = 10;
  for (int i = 0, n = this->global_peak5_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      10, this->global_peak5(i), output);
  }

  // repeated double bg_mean = 11;
  for (int i = 0, n = this->bg_mean_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->bg_mean(i), output);
  }

  // repeated double signal_mean = 12;
  for (int i = 0, n = this->signal_mean_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->signal_mean(i), output);
  }

  // repeated double signal_max = 13;
  for (int i = 0, n = this->signal_max_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      13, this->signal_max(i), output);
  }

  // repeated double reduced_integ = 14;
  for (int i = 0, n = this->reduced_integ_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      14, this->reduced_integ(i), output);
  }

  // repeated double reduced_mean = 15;
  for (int i = 0, n = this->reduced_mean_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      15, this->reduced_mean(i), output);
  }

  // repeated double reduced_max = 16;
  for (int i = 0, n = this->reduced_max_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      16, this->reduced_max(i), output);
  }

  // repeated double custom = 17;
  for (int i = 0, n = this->custom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      17, this->custom(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dolphindaq.diode.Metrics)
}

::google::protobuf::uint8* Metrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dolphindaq.diode.Metrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 shot_num = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->shot_num_, target);

  // repeated .google.protobuf.Timestamp shot_time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shot_time_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->shot_time(static_cast<int>(i)), deterministic, target);
  }

  // repeated int64 shot_time_seconds = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(3, this->shot_time_seconds_, target);

  // repeated int32 shot_time_nanos = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->shot_time_nanos_, target);

  // repeated uint64 shot_time_alt_nanos = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(5, this->shot_time_alt_nanos_, target);

  // repeated uint64 global_sum = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(6, this->global_sum_, target);

  // repeated double global_mean = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(7, this->global_mean_, target);

  // repeated uint64 global_max = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(8, this->global_max_, target);

  // repeated uint64 global_min = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(9, this->global_min_, target);

  // repeated uint64 global_peak5 = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(10, this->global_peak5_, target);

  // repeated double bg_mean = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(11, this->bg_mean_, target);

  // repeated double signal_mean = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(12, this->signal_mean_, target);

  // repeated double signal_max = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(13, this->signal_max_, target);

  // repeated double reduced_integ = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(14, this->reduced_integ_, target);

  // repeated double reduced_mean = 15;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(15, this->reduced_mean_, target);

  // repeated double reduced_max = 16;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(16, this->reduced_max_, target);

  // repeated double custom = 17;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(17, this->custom_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dolphindaq.diode.Metrics)
  return target;
}

size_t Metrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dolphindaq.diode.Metrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 shot_num = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->shot_num_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->shot_num_size());
    total_size += data_size;
  }

  // repeated .google.protobuf.Timestamp shot_time = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->shot_time_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->shot_time(static_cast<int>(i)));
    }
  }

  // repeated int64 shot_time_seconds = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->shot_time_seconds_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->shot_time_seconds_size());
    total_size += data_size;
  }

  // repeated int32 shot_time_nanos = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->shot_time_nanos_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->shot_time_nanos_size());
    total_size += data_size;
  }

  // repeated uint64 shot_time_alt_nanos = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->shot_time_alt_nanos_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->shot_time_alt_nanos_size());
    total_size += data_size;
  }

  // repeated uint64 global_sum = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->global_sum_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->global_sum_size());
    total_size += data_size;
  }

  // repeated double global_mean = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->global_mean_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->global_mean_size());
    total_size += data_size;
  }

  // repeated uint64 global_max = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->global_max_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->global_max_size());
    total_size += data_size;
  }

  // repeated uint64 global_min = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->global_min_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->global_min_size());
    total_size += data_size;
  }

  // repeated uint64 global_peak5 = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->global_peak5_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->global_peak5_size());
    total_size += data_size;
  }

  // repeated double bg_mean = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->bg_mean_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bg_mean_size());
    total_size += data_size;
  }

  // repeated double signal_mean = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->signal_mean_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->signal_mean_size());
    total_size += data_size;
  }

  // repeated double signal_max = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->signal_max_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->signal_max_size());
    total_size += data_size;
  }

  // repeated double reduced_integ = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->reduced_integ_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->reduced_integ_size());
    total_size += data_size;
  }

  // repeated double reduced_mean = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->reduced_mean_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->reduced_mean_size());
    total_size += data_size;
  }

  // repeated double reduced_max = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->reduced_max_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->reduced_max_size());
    total_size += data_size;
  }

  // repeated double custom = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->custom_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->custom_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dolphindaq.diode.Metrics)
  GOOGLE_DCHECK_NE(&from, this);
  const Metrics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Metrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dolphindaq.diode.Metrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dolphindaq.diode.Metrics)
    MergeFrom(*source);
  }
}

void Metrics::MergeFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dolphindaq.diode.Metrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shot_num_.MergeFrom(from.shot_num_);
  shot_time_.MergeFrom(from.shot_time_);
  shot_time_seconds_.MergeFrom(from.shot_time_seconds_);
  shot_time_nanos_.MergeFrom(from.shot_time_nanos_);
  shot_time_alt_nanos_.MergeFrom(from.shot_time_alt_nanos_);
  global_sum_.MergeFrom(from.global_sum_);
  global_mean_.MergeFrom(from.global_mean_);
  global_max_.MergeFrom(from.global_max_);
  global_min_.MergeFrom(from.global_min_);
  global_peak5_.MergeFrom(from.global_peak5_);
  bg_mean_.MergeFrom(from.bg_mean_);
  signal_mean_.MergeFrom(from.signal_mean_);
  signal_max_.MergeFrom(from.signal_max_);
  reduced_integ_.MergeFrom(from.reduced_integ_);
  reduced_mean_.MergeFrom(from.reduced_mean_);
  reduced_max_.MergeFrom(from.reduced_max_);
  custom_.MergeFrom(from.custom_);
}

void Metrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dolphindaq.diode.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metrics::CopyFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dolphindaq.diode.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metrics::IsInitialized() const {
  return true;
}

void Metrics::Swap(Metrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metrics::InternalSwap(Metrics* other) {
  using std::swap;
  shot_num_.InternalSwap(&other->shot_num_);
  CastToBase(&shot_time_)->InternalSwap(CastToBase(&other->shot_time_));
  shot_time_seconds_.InternalSwap(&other->shot_time_seconds_);
  shot_time_nanos_.InternalSwap(&other->shot_time_nanos_);
  shot_time_alt_nanos_.InternalSwap(&other->shot_time_alt_nanos_);
  global_sum_.InternalSwap(&other->global_sum_);
  global_mean_.InternalSwap(&other->global_mean_);
  global_max_.InternalSwap(&other->global_max_);
  global_min_.InternalSwap(&other->global_min_);
  global_peak5_.InternalSwap(&other->global_peak5_);
  bg_mean_.InternalSwap(&other->bg_mean_);
  signal_mean_.InternalSwap(&other->signal_mean_);
  signal_max_.InternalSwap(&other->signal_max_);
  reduced_integ_.InternalSwap(&other->reduced_integ_);
  reduced_mean_.InternalSwap(&other->reduced_mean_);
  reduced_max_.InternalSwap(&other->reduced_max_);
  custom_.InternalSwap(&other->custom_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Metrics::GetMetadata() const {
  protobuf_diode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace diode
}  // namespace dolphindaq
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dolphindaq::diode::Settings* Arena::CreateMaybeMessage< ::dolphindaq::diode::Settings >(Arena* arena) {
  return Arena::CreateInternal< ::dolphindaq::diode::Settings >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dolphindaq::diode::Data* Arena::CreateMaybeMessage< ::dolphindaq::diode::Data >(Arena* arena) {
  return Arena::CreateInternal< ::dolphindaq::diode::Data >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dolphindaq::diode::Trace* Arena::CreateMaybeMessage< ::dolphindaq::diode::Trace >(Arena* arena) {
  return Arena::CreateInternal< ::dolphindaq::diode::Trace >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dolphindaq::diode::Metrics* Arena::CreateMaybeMessage< ::dolphindaq::diode::Metrics >(Arena* arena) {
  return Arena::CreateInternal< ::dolphindaq::diode::Metrics >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
