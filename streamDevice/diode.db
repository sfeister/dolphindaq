# DolphinDAQ photodiode database file
# Matches up with the proto file of the same name
# Built by checking against supported record types at https://paulscherrerinstitute.github.io/StreamDevice/recordtypes.html

##### Common #####

record(stringin,"$(P):info"){
    field(DESC,"Device identification")
	field(DTYP,"stream")
	field(INP,"@diode.proto info $(BUS)")
    field(PINI,"YES")
}

record(stringin,"$(P):debug"){
	field(DTYP,"stream")
	field(INP,"@diode.proto debug $(BUS)")
}

record(int64in,"$(P):trigger:count"){
    field(DESC,"Get global trigger count")
    field(SCAN,"1 second")
	field(DTYP,"stream")
    field(INP,"@diode.proto CountQ $(BUS)")
    }

record(int64out,"$(P):trigger:count:set"){
    field(DESC,"Set global trigger count")
	field(DTYP,"stream")
    field(OUT,"@diode.proto Count $(BUS)")
    }

record(stringin,"$(P):system:time"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
    field(INP,"@diode.proto TimeQ $(BUS)")
}

record(int64in,"$(P):system:time:unix"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
    field(INP,"@diode.proto TimeUnixQ $(BUS)")
}

record(int64out,"$(P):system:time:unix:set"){
	field(DTYP,"stream")
    field(OUT,"@diode.proto TimeUnix $(BUS)")
}

##### Diode-Specific #####

record(int64in,"$(P):trace:decimation"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
	field(EGU,"seconds")
    field(INP,"@diode.proto TraceDecQ $(BUS)")
}

record(int64out,"$(P):trace:decimation:set"){
	field(DTYP,"stream")
	field(EGU,"seconds")
    field(OUT,"@diode.proto TraceDec $(BUS)")
}

record(ai,"$(P):trace:dt"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
	field(EGU,"seconds")
    field(INP,"@diode.proto TraceDtQ $(BUS)")
}

record(ai,"$(P):trace:nt"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
    field(INP,"@diode.proto TraceNtQ $(BUS)")
}

record(ai,"$(P):trace:ymin"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
	field(EGU,"Volts")
    field(INP,"@diode.proto TraceYminQ $(BUS)")
}

record(ai,"$(P):trace:ymax"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
	field(EGU,"Volts")
    field(INP,"@diode.proto TraceYmaxQ $(BUS)")
}

### TODO: Add in YARR input


#### Dt, T1, T2, T3, T4
record(ai,"$(P):dt"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
	field(EGU,"seconds")
    field(INP,"@diode.proto DtQ $(BUS)")
}

record(ao,"$(P):dt:set"){
	field(DTYP,"stream")
	field(EGU,"seconds")
    field(OUT,"@diode.proto Dt $(BUS)")
}


record(ai,"$(P):t1"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
	field(EGU,"seconds")
    field(INP,"@diode.proto T1Q $(BUS)")
}

record(ao,"$(P):t1:set"){
	field(DTYP,"stream")
	field(EGU,"seconds")
    field(OUT,"@diode.proto T1 $(BUS)")
}

record(ai,"$(P):t1:nt"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
	field(EGU,"seconds")
    field(INP,"@diode.proto T1NtQ $(BUS)")
}


record(ai,"$(P):t2"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
	field(EGU,"seconds")
    field(INP,"@diode.proto T2Q $(BUS)")
}

record(ao,"$(P):t2:set"){
	field(DTYP,"stream")
	field(EGU,"seconds")
    field(OUT,"@diode.proto T2 $(BUS)")
}

record(ai,"$(P):t2:nt"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
	field(EGU,"seconds")
    field(INP,"@diode.proto T2NtQ $(BUS)")
}


record(ai,"$(P):t3"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
	field(EGU,"seconds")
    field(INP,"@diode.proto T3Q $(BUS)")
}

record(ao,"$(P):t3:set"){
	field(DTYP,"stream")
	field(EGU,"seconds")
    field(OUT,"@diode.proto T3 $(BUS)")
}

record(ai,"$(P):t3:nt"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
	field(EGU,"seconds")
    field(INP,"@diode.proto T3NtQ $(BUS)")
}

record(ai,"$(P):t4"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
	field(EGU,"seconds")
    field(INP,"@diode.proto T4Q $(BUS)")
}

record(ao,"$(P):t4:set"){
	field(DTYP,"stream")
	field(EGU,"seconds")
    field(OUT,"@diode.proto T4 $(BUS)")
}

record(ai,"$(P):t4:nt"){
	field(DTYP,"stream")
    field(SCAN,"1 second")
	field(EGU,"seconds")
    field(INP,"@diode.proto T4NtQ $(BUS)")
}
