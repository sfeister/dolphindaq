// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diode.proto

#ifndef PROTOBUF_INCLUDED_diode_2eproto
#define PROTOBUF_INCLUDED_diode_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_diode_2eproto 

namespace protobuf_diode_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_diode_2eproto
namespace dolphindaq {
namespace diode {
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Metrics;
class MetricsDefaultTypeInternal;
extern MetricsDefaultTypeInternal _Metrics_default_instance_;
class Settings;
class SettingsDefaultTypeInternal;
extern SettingsDefaultTypeInternal _Settings_default_instance_;
class Trace;
class TraceDefaultTypeInternal;
extern TraceDefaultTypeInternal _Trace_default_instance_;
}  // namespace diode
}  // namespace dolphindaq
namespace google {
namespace protobuf {
template<> ::dolphindaq::diode::Data* Arena::CreateMaybeMessage<::dolphindaq::diode::Data>(Arena*);
template<> ::dolphindaq::diode::Metrics* Arena::CreateMaybeMessage<::dolphindaq::diode::Metrics>(Arena*);
template<> ::dolphindaq::diode::Settings* Arena::CreateMaybeMessage<::dolphindaq::diode::Settings>(Arena*);
template<> ::dolphindaq::diode::Trace* Arena::CreateMaybeMessage<::dolphindaq::diode::Trace>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dolphindaq {
namespace diode {

// ===================================================================

class Settings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dolphindaq.diode.Settings) */ {
 public:
  Settings();
  virtual ~Settings();

  Settings(const Settings& from);

  inline Settings& operator=(const Settings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Settings(Settings&& from) noexcept
    : Settings() {
    *this = ::std::move(from);
  }

  inline Settings& operator=(Settings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Settings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Settings* internal_default_instance() {
    return reinterpret_cast<const Settings*>(
               &_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Settings* other);
  friend void swap(Settings& a, Settings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Settings* New() const final {
    return CreateMaybeMessage<Settings>(NULL);
  }

  Settings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Settings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Settings& from);
  void MergeFrom(const Settings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Settings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double trace_tvals = 3;
  int trace_tvals_size() const;
  void clear_trace_tvals();
  static const int kTraceTvalsFieldNumber = 3;
  double trace_tvals(int index) const;
  void set_trace_tvals(int index, double value);
  void add_trace_tvals(double value);
  const ::google::protobuf::RepeatedField< double >&
      trace_tvals() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_trace_tvals();

  // optional .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  public:
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // optional uint64 start_shot_num = 1;
  bool has_start_shot_num() const;
  void clear_start_shot_num();
  static const int kStartShotNumFieldNumber = 1;
  ::google::protobuf::uint64 start_shot_num() const;
  void set_start_shot_num(::google::protobuf::uint64 value);

  // optional double trace_dt = 4;
  bool has_trace_dt() const;
  void clear_trace_dt();
  static const int kTraceDtFieldNumber = 4;
  double trace_dt() const;
  void set_trace_dt(double value);

  // optional double trace_ymin = 6;
  bool has_trace_ymin() const;
  void clear_trace_ymin();
  static const int kTraceYminFieldNumber = 6;
  double trace_ymin() const;
  void set_trace_ymin(double value);

  // optional uint32 trace_nt = 5;
  bool has_trace_nt() const;
  void clear_trace_nt();
  static const int kTraceNtFieldNumber = 5;
  ::google::protobuf::uint32 trace_nt() const;
  void set_trace_nt(::google::protobuf::uint32 value);

  // optional uint32 metrics_batch_size = 8;
  bool has_metrics_batch_size() const;
  void clear_metrics_batch_size();
  static const int kMetricsBatchSizeFieldNumber = 8;
  ::google::protobuf::uint32 metrics_batch_size() const;
  void set_metrics_batch_size(::google::protobuf::uint32 value);

  // optional double trace_ymax = 7;
  bool has_trace_ymax() const;
  void clear_trace_ymax();
  static const int kTraceYmaxFieldNumber = 7;
  double trace_ymax() const;
  void set_trace_ymax(double value);

  // optional double dt = 9;
  bool has_dt() const;
  void clear_dt();
  static const int kDtFieldNumber = 9;
  double dt() const;
  void set_dt(double value);

  // optional double t1 = 10;
  bool has_t1() const;
  void clear_t1();
  static const int kT1FieldNumber = 10;
  double t1() const;
  void set_t1(double value);

  // optional double t2 = 11;
  bool has_t2() const;
  void clear_t2();
  static const int kT2FieldNumber = 11;
  double t2() const;
  void set_t2(double value);

  // optional double t3 = 12;
  bool has_t3() const;
  void clear_t3();
  static const int kT3FieldNumber = 12;
  double t3() const;
  void set_t3(double value);

  // optional double t4 = 13;
  bool has_t4() const;
  void clear_t4();
  static const int kT4FieldNumber = 13;
  double t4() const;
  void set_t4(double value);

  // optional double timtick_secs = 14;
  bool has_timtick_secs() const;
  void clear_timtick_secs();
  static const int kTimtickSecsFieldNumber = 14;
  double timtick_secs() const;
  void set_timtick_secs(double value);

  // optional uint32 dt_timticks = 15;
  bool has_dt_timticks() const;
  void clear_dt_timticks();
  static const int kDtTimticksFieldNumber = 15;
  ::google::protobuf::uint32 dt_timticks() const;
  void set_dt_timticks(::google::protobuf::uint32 value);

  // optional uint32 t1_dts = 16;
  bool has_t1_dts() const;
  void clear_t1_dts();
  static const int kT1DtsFieldNumber = 16;
  ::google::protobuf::uint32 t1_dts() const;
  void set_t1_dts(::google::protobuf::uint32 value);

  // optional uint32 t2_dts = 17;
  bool has_t2_dts() const;
  void clear_t2_dts();
  static const int kT2DtsFieldNumber = 17;
  ::google::protobuf::uint32 t2_dts() const;
  void set_t2_dts(::google::protobuf::uint32 value);

  // optional uint32 t3_dts = 18;
  bool has_t3_dts() const;
  void clear_t3_dts();
  static const int kT3DtsFieldNumber = 18;
  ::google::protobuf::uint32 t3_dts() const;
  void set_t3_dts(::google::protobuf::uint32 value);

  // optional uint32 t4_dts = 19;
  bool has_t4_dts() const;
  void clear_t4_dts();
  static const int kT4DtsFieldNumber = 19;
  ::google::protobuf::uint32 t4_dts() const;
  void set_t4_dts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dolphindaq.diode.Settings)
 private:
  void set_has_start_shot_num();
  void clear_has_start_shot_num();
  void set_has_start_time();
  void clear_has_start_time();
  void set_has_trace_dt();
  void clear_has_trace_dt();
  void set_has_trace_nt();
  void clear_has_trace_nt();
  void set_has_trace_ymin();
  void clear_has_trace_ymin();
  void set_has_trace_ymax();
  void clear_has_trace_ymax();
  void set_has_metrics_batch_size();
  void clear_has_metrics_batch_size();
  void set_has_dt();
  void clear_has_dt();
  void set_has_t1();
  void clear_has_t1();
  void set_has_t2();
  void clear_has_t2();
  void set_has_t3();
  void clear_has_t3();
  void set_has_t4();
  void clear_has_t4();
  void set_has_timtick_secs();
  void clear_has_timtick_secs();
  void set_has_dt_timticks();
  void clear_has_dt_timticks();
  void set_has_t1_dts();
  void clear_has_t1_dts();
  void set_has_t2_dts();
  void clear_has_t2_dts();
  void set_has_t3_dts();
  void clear_has_t3_dts();
  void set_has_t4_dts();
  void clear_has_t4_dts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > trace_tvals_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::uint64 start_shot_num_;
  double trace_dt_;
  double trace_ymin_;
  ::google::protobuf::uint32 trace_nt_;
  ::google::protobuf::uint32 metrics_batch_size_;
  double trace_ymax_;
  double dt_;
  double t1_;
  double t2_;
  double t3_;
  double t4_;
  double timtick_secs_;
  ::google::protobuf::uint32 dt_timticks_;
  ::google::protobuf::uint32 t1_dts_;
  ::google::protobuf::uint32 t2_dts_;
  ::google::protobuf::uint32 t3_dts_;
  ::google::protobuf::uint32 t4_dts_;
  friend struct ::protobuf_diode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dolphindaq.diode.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Data* other);
  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(NULL);
  }

  Data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dolphindaq.diode.Trace trace = 1;
  bool has_trace() const;
  void clear_trace();
  static const int kTraceFieldNumber = 1;
  private:
  const ::dolphindaq::diode::Trace& _internal_trace() const;
  public:
  const ::dolphindaq::diode::Trace& trace() const;
  ::dolphindaq::diode::Trace* release_trace();
  ::dolphindaq::diode::Trace* mutable_trace();
  void set_allocated_trace(::dolphindaq::diode::Trace* trace);

  // optional .dolphindaq.diode.Metrics metrics = 2;
  bool has_metrics() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 2;
  private:
  const ::dolphindaq::diode::Metrics& _internal_metrics() const;
  public:
  const ::dolphindaq::diode::Metrics& metrics() const;
  ::dolphindaq::diode::Metrics* release_metrics();
  ::dolphindaq::diode::Metrics* mutable_metrics();
  void set_allocated_metrics(::dolphindaq::diode::Metrics* metrics);

  // @@protoc_insertion_point(class_scope:dolphindaq.diode.Data)
 private:
  void set_has_trace();
  void clear_has_trace();
  void set_has_metrics();
  void clear_has_metrics();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::dolphindaq::diode::Trace* trace_;
  ::dolphindaq::diode::Metrics* metrics_;
  friend struct ::protobuf_diode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Trace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dolphindaq.diode.Trace) */ {
 public:
  Trace();
  virtual ~Trace();

  Trace(const Trace& from);

  inline Trace& operator=(const Trace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trace(Trace&& from) noexcept
    : Trace() {
    *this = ::std::move(from);
  }

  inline Trace& operator=(Trace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trace* internal_default_instance() {
    return reinterpret_cast<const Trace*>(
               &_Trace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Trace* other);
  friend void swap(Trace& a, Trace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trace* New() const final {
    return CreateMaybeMessage<Trace>(NULL);
  }

  Trace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Trace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Trace& from);
  void MergeFrom(const Trace& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes yvals = 3;
  bool has_yvals() const;
  void clear_yvals();
  static const int kYvalsFieldNumber = 3;
  const ::std::string& yvals() const;
  void set_yvals(const ::std::string& value);
  #if LANG_CXX11
  void set_yvals(::std::string&& value);
  #endif
  void set_yvals(const char* value);
  void set_yvals(const void* value, size_t size);
  ::std::string* mutable_yvals();
  ::std::string* release_yvals();
  void set_allocated_yvals(::std::string* yvals);

  // optional .google.protobuf.Timestamp shot_time = 2;
  bool has_shot_time() const;
  void clear_shot_time();
  static const int kShotTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_shot_time() const;
  public:
  const ::google::protobuf::Timestamp& shot_time() const;
  ::google::protobuf::Timestamp* release_shot_time();
  ::google::protobuf::Timestamp* mutable_shot_time();
  void set_allocated_shot_time(::google::protobuf::Timestamp* shot_time);

  // optional uint64 shot_num = 1;
  bool has_shot_num() const;
  void clear_shot_num();
  static const int kShotNumFieldNumber = 1;
  ::google::protobuf::uint64 shot_num() const;
  void set_shot_num(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dolphindaq.diode.Trace)
 private:
  void set_has_shot_num();
  void clear_has_shot_num();
  void set_has_shot_time();
  void clear_has_shot_time();
  void set_has_yvals();
  void clear_has_yvals();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr yvals_;
  ::google::protobuf::Timestamp* shot_time_;
  ::google::protobuf::uint64 shot_num_;
  friend struct ::protobuf_diode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Metrics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dolphindaq.diode.Metrics) */ {
 public:
  Metrics();
  virtual ~Metrics();

  Metrics(const Metrics& from);

  inline Metrics& operator=(const Metrics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Metrics(Metrics&& from) noexcept
    : Metrics() {
    *this = ::std::move(from);
  }

  inline Metrics& operator=(Metrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metrics* internal_default_instance() {
    return reinterpret_cast<const Metrics*>(
               &_Metrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Metrics* other);
  friend void swap(Metrics& a, Metrics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Metrics* New() const final {
    return CreateMaybeMessage<Metrics>(NULL);
  }

  Metrics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Metrics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Metrics& from);
  void MergeFrom(const Metrics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metrics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 shot_num = 1;
  int shot_num_size() const;
  void clear_shot_num();
  static const int kShotNumFieldNumber = 1;
  ::google::protobuf::uint64 shot_num(int index) const;
  void set_shot_num(int index, ::google::protobuf::uint64 value);
  void add_shot_num(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      shot_num() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_shot_num();

  // repeated .google.protobuf.Timestamp shot_time = 2;
  int shot_time_size() const;
  void clear_shot_time();
  static const int kShotTimeFieldNumber = 2;
  ::google::protobuf::Timestamp* mutable_shot_time(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >*
      mutable_shot_time();
  const ::google::protobuf::Timestamp& shot_time(int index) const;
  ::google::protobuf::Timestamp* add_shot_time();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >&
      shot_time() const;

  // repeated int64 shot_time_seconds = 3;
  int shot_time_seconds_size() const;
  void clear_shot_time_seconds();
  static const int kShotTimeSecondsFieldNumber = 3;
  ::google::protobuf::int64 shot_time_seconds(int index) const;
  void set_shot_time_seconds(int index, ::google::protobuf::int64 value);
  void add_shot_time_seconds(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      shot_time_seconds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_shot_time_seconds();

  // repeated int32 shot_time_nanos = 4;
  int shot_time_nanos_size() const;
  void clear_shot_time_nanos();
  static const int kShotTimeNanosFieldNumber = 4;
  ::google::protobuf::int32 shot_time_nanos(int index) const;
  void set_shot_time_nanos(int index, ::google::protobuf::int32 value);
  void add_shot_time_nanos(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shot_time_nanos() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shot_time_nanos();

  // repeated uint64 shot_time_alt_nanos = 5;
  int shot_time_alt_nanos_size() const;
  void clear_shot_time_alt_nanos();
  static const int kShotTimeAltNanosFieldNumber = 5;
  ::google::protobuf::uint64 shot_time_alt_nanos(int index) const;
  void set_shot_time_alt_nanos(int index, ::google::protobuf::uint64 value);
  void add_shot_time_alt_nanos(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      shot_time_alt_nanos() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_shot_time_alt_nanos();

  // repeated uint64 global_sum = 6;
  int global_sum_size() const;
  void clear_global_sum();
  static const int kGlobalSumFieldNumber = 6;
  ::google::protobuf::uint64 global_sum(int index) const;
  void set_global_sum(int index, ::google::protobuf::uint64 value);
  void add_global_sum(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      global_sum() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_global_sum();

  // repeated double global_mean = 7;
  int global_mean_size() const;
  void clear_global_mean();
  static const int kGlobalMeanFieldNumber = 7;
  double global_mean(int index) const;
  void set_global_mean(int index, double value);
  void add_global_mean(double value);
  const ::google::protobuf::RepeatedField< double >&
      global_mean() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_global_mean();

  // repeated uint64 global_max = 8;
  int global_max_size() const;
  void clear_global_max();
  static const int kGlobalMaxFieldNumber = 8;
  ::google::protobuf::uint64 global_max(int index) const;
  void set_global_max(int index, ::google::protobuf::uint64 value);
  void add_global_max(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      global_max() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_global_max();

  // repeated uint64 global_min = 9;
  int global_min_size() const;
  void clear_global_min();
  static const int kGlobalMinFieldNumber = 9;
  ::google::protobuf::uint64 global_min(int index) const;
  void set_global_min(int index, ::google::protobuf::uint64 value);
  void add_global_min(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      global_min() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_global_min();

  // repeated uint64 global_peak5 = 10;
  int global_peak5_size() const;
  void clear_global_peak5();
  static const int kGlobalPeak5FieldNumber = 10;
  ::google::protobuf::uint64 global_peak5(int index) const;
  void set_global_peak5(int index, ::google::protobuf::uint64 value);
  void add_global_peak5(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      global_peak5() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_global_peak5();

  // repeated double bg_mean = 11;
  int bg_mean_size() const;
  void clear_bg_mean();
  static const int kBgMeanFieldNumber = 11;
  double bg_mean(int index) const;
  void set_bg_mean(int index, double value);
  void add_bg_mean(double value);
  const ::google::protobuf::RepeatedField< double >&
      bg_mean() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_bg_mean();

  // repeated double signal_mean = 12;
  int signal_mean_size() const;
  void clear_signal_mean();
  static const int kSignalMeanFieldNumber = 12;
  double signal_mean(int index) const;
  void set_signal_mean(int index, double value);
  void add_signal_mean(double value);
  const ::google::protobuf::RepeatedField< double >&
      signal_mean() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_signal_mean();

  // repeated double signal_max = 13;
  int signal_max_size() const;
  void clear_signal_max();
  static const int kSignalMaxFieldNumber = 13;
  double signal_max(int index) const;
  void set_signal_max(int index, double value);
  void add_signal_max(double value);
  const ::google::protobuf::RepeatedField< double >&
      signal_max() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_signal_max();

  // repeated double reduced_integ = 14;
  int reduced_integ_size() const;
  void clear_reduced_integ();
  static const int kReducedIntegFieldNumber = 14;
  double reduced_integ(int index) const;
  void set_reduced_integ(int index, double value);
  void add_reduced_integ(double value);
  const ::google::protobuf::RepeatedField< double >&
      reduced_integ() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_reduced_integ();

  // repeated double reduced_mean = 15;
  int reduced_mean_size() const;
  void clear_reduced_mean();
  static const int kReducedMeanFieldNumber = 15;
  double reduced_mean(int index) const;
  void set_reduced_mean(int index, double value);
  void add_reduced_mean(double value);
  const ::google::protobuf::RepeatedField< double >&
      reduced_mean() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_reduced_mean();

  // repeated double reduced_max = 16;
  int reduced_max_size() const;
  void clear_reduced_max();
  static const int kReducedMaxFieldNumber = 16;
  double reduced_max(int index) const;
  void set_reduced_max(int index, double value);
  void add_reduced_max(double value);
  const ::google::protobuf::RepeatedField< double >&
      reduced_max() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_reduced_max();

  // repeated double custom = 17;
  int custom_size() const;
  void clear_custom();
  static const int kCustomFieldNumber = 17;
  double custom(int index) const;
  void set_custom(int index, double value);
  void add_custom(double value);
  const ::google::protobuf::RepeatedField< double >&
      custom() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_custom();

  // @@protoc_insertion_point(class_scope:dolphindaq.diode.Metrics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > shot_num_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp > shot_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > shot_time_seconds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shot_time_nanos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > shot_time_alt_nanos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > global_sum_;
  ::google::protobuf::RepeatedField< double > global_mean_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > global_max_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > global_min_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > global_peak5_;
  ::google::protobuf::RepeatedField< double > bg_mean_;
  ::google::protobuf::RepeatedField< double > signal_mean_;
  ::google::protobuf::RepeatedField< double > signal_max_;
  ::google::protobuf::RepeatedField< double > reduced_integ_;
  ::google::protobuf::RepeatedField< double > reduced_mean_;
  ::google::protobuf::RepeatedField< double > reduced_max_;
  ::google::protobuf::RepeatedField< double > custom_;
  friend struct ::protobuf_diode_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Settings

// optional uint64 start_shot_num = 1;
inline bool Settings::has_start_shot_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Settings::set_has_start_shot_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Settings::clear_has_start_shot_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Settings::clear_start_shot_num() {
  start_shot_num_ = GOOGLE_ULONGLONG(0);
  clear_has_start_shot_num();
}
inline ::google::protobuf::uint64 Settings::start_shot_num() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.start_shot_num)
  return start_shot_num_;
}
inline void Settings::set_start_shot_num(::google::protobuf::uint64 value) {
  set_has_start_shot_num();
  start_shot_num_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.start_shot_num)
}

// optional .google.protobuf.Timestamp start_time = 2;
inline bool Settings::has_start_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Settings::set_has_start_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Settings::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::google::protobuf::Timestamp& Settings::_internal_start_time() const {
  return *start_time_;
}
inline const ::google::protobuf::Timestamp& Settings::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Settings::release_start_time() {
  // @@protoc_insertion_point(field_release:dolphindaq.diode.Settings.start_time)
  clear_has_start_time();
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Settings::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dolphindaq.diode.Settings.start_time)
  return start_time_;
}
inline void Settings::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    set_has_start_time();
  } else {
    clear_has_start_time();
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.diode.Settings.start_time)
}

// repeated double trace_tvals = 3;
inline int Settings::trace_tvals_size() const {
  return trace_tvals_.size();
}
inline void Settings::clear_trace_tvals() {
  trace_tvals_.Clear();
}
inline double Settings::trace_tvals(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.trace_tvals)
  return trace_tvals_.Get(index);
}
inline void Settings::set_trace_tvals(int index, double value) {
  trace_tvals_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.trace_tvals)
}
inline void Settings::add_trace_tvals(double value) {
  trace_tvals_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Settings.trace_tvals)
}
inline const ::google::protobuf::RepeatedField< double >&
Settings::trace_tvals() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Settings.trace_tvals)
  return trace_tvals_;
}
inline ::google::protobuf::RepeatedField< double >*
Settings::mutable_trace_tvals() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Settings.trace_tvals)
  return &trace_tvals_;
}

// optional double trace_dt = 4;
inline bool Settings::has_trace_dt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Settings::set_has_trace_dt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Settings::clear_has_trace_dt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Settings::clear_trace_dt() {
  trace_dt_ = 0;
  clear_has_trace_dt();
}
inline double Settings::trace_dt() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.trace_dt)
  return trace_dt_;
}
inline void Settings::set_trace_dt(double value) {
  set_has_trace_dt();
  trace_dt_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.trace_dt)
}

// optional uint32 trace_nt = 5;
inline bool Settings::has_trace_nt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Settings::set_has_trace_nt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Settings::clear_has_trace_nt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Settings::clear_trace_nt() {
  trace_nt_ = 0u;
  clear_has_trace_nt();
}
inline ::google::protobuf::uint32 Settings::trace_nt() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.trace_nt)
  return trace_nt_;
}
inline void Settings::set_trace_nt(::google::protobuf::uint32 value) {
  set_has_trace_nt();
  trace_nt_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.trace_nt)
}

// optional double trace_ymin = 6;
inline bool Settings::has_trace_ymin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Settings::set_has_trace_ymin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Settings::clear_has_trace_ymin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Settings::clear_trace_ymin() {
  trace_ymin_ = 0;
  clear_has_trace_ymin();
}
inline double Settings::trace_ymin() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.trace_ymin)
  return trace_ymin_;
}
inline void Settings::set_trace_ymin(double value) {
  set_has_trace_ymin();
  trace_ymin_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.trace_ymin)
}

// optional double trace_ymax = 7;
inline bool Settings::has_trace_ymax() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Settings::set_has_trace_ymax() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Settings::clear_has_trace_ymax() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Settings::clear_trace_ymax() {
  trace_ymax_ = 0;
  clear_has_trace_ymax();
}
inline double Settings::trace_ymax() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.trace_ymax)
  return trace_ymax_;
}
inline void Settings::set_trace_ymax(double value) {
  set_has_trace_ymax();
  trace_ymax_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.trace_ymax)
}

// optional uint32 metrics_batch_size = 8;
inline bool Settings::has_metrics_batch_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Settings::set_has_metrics_batch_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Settings::clear_has_metrics_batch_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Settings::clear_metrics_batch_size() {
  metrics_batch_size_ = 0u;
  clear_has_metrics_batch_size();
}
inline ::google::protobuf::uint32 Settings::metrics_batch_size() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.metrics_batch_size)
  return metrics_batch_size_;
}
inline void Settings::set_metrics_batch_size(::google::protobuf::uint32 value) {
  set_has_metrics_batch_size();
  metrics_batch_size_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.metrics_batch_size)
}

// optional double dt = 9;
inline bool Settings::has_dt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Settings::set_has_dt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Settings::clear_has_dt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Settings::clear_dt() {
  dt_ = 0;
  clear_has_dt();
}
inline double Settings::dt() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.dt)
  return dt_;
}
inline void Settings::set_dt(double value) {
  set_has_dt();
  dt_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.dt)
}

// optional double t1 = 10;
inline bool Settings::has_t1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Settings::set_has_t1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Settings::clear_has_t1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Settings::clear_t1() {
  t1_ = 0;
  clear_has_t1();
}
inline double Settings::t1() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.t1)
  return t1_;
}
inline void Settings::set_t1(double value) {
  set_has_t1();
  t1_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.t1)
}

// optional double t2 = 11;
inline bool Settings::has_t2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Settings::set_has_t2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Settings::clear_has_t2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Settings::clear_t2() {
  t2_ = 0;
  clear_has_t2();
}
inline double Settings::t2() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.t2)
  return t2_;
}
inline void Settings::set_t2(double value) {
  set_has_t2();
  t2_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.t2)
}

// optional double t3 = 12;
inline bool Settings::has_t3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Settings::set_has_t3() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Settings::clear_has_t3() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Settings::clear_t3() {
  t3_ = 0;
  clear_has_t3();
}
inline double Settings::t3() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.t3)
  return t3_;
}
inline void Settings::set_t3(double value) {
  set_has_t3();
  t3_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.t3)
}

// optional double t4 = 13;
inline bool Settings::has_t4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Settings::set_has_t4() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Settings::clear_has_t4() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Settings::clear_t4() {
  t4_ = 0;
  clear_has_t4();
}
inline double Settings::t4() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.t4)
  return t4_;
}
inline void Settings::set_t4(double value) {
  set_has_t4();
  t4_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.t4)
}

// optional double timtick_secs = 14;
inline bool Settings::has_timtick_secs() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Settings::set_has_timtick_secs() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Settings::clear_has_timtick_secs() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Settings::clear_timtick_secs() {
  timtick_secs_ = 0;
  clear_has_timtick_secs();
}
inline double Settings::timtick_secs() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.timtick_secs)
  return timtick_secs_;
}
inline void Settings::set_timtick_secs(double value) {
  set_has_timtick_secs();
  timtick_secs_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.timtick_secs)
}

// optional uint32 dt_timticks = 15;
inline bool Settings::has_dt_timticks() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Settings::set_has_dt_timticks() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Settings::clear_has_dt_timticks() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Settings::clear_dt_timticks() {
  dt_timticks_ = 0u;
  clear_has_dt_timticks();
}
inline ::google::protobuf::uint32 Settings::dt_timticks() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.dt_timticks)
  return dt_timticks_;
}
inline void Settings::set_dt_timticks(::google::protobuf::uint32 value) {
  set_has_dt_timticks();
  dt_timticks_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.dt_timticks)
}

// optional uint32 t1_dts = 16;
inline bool Settings::has_t1_dts() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Settings::set_has_t1_dts() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Settings::clear_has_t1_dts() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Settings::clear_t1_dts() {
  t1_dts_ = 0u;
  clear_has_t1_dts();
}
inline ::google::protobuf::uint32 Settings::t1_dts() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.t1_dts)
  return t1_dts_;
}
inline void Settings::set_t1_dts(::google::protobuf::uint32 value) {
  set_has_t1_dts();
  t1_dts_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.t1_dts)
}

// optional uint32 t2_dts = 17;
inline bool Settings::has_t2_dts() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Settings::set_has_t2_dts() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Settings::clear_has_t2_dts() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Settings::clear_t2_dts() {
  t2_dts_ = 0u;
  clear_has_t2_dts();
}
inline ::google::protobuf::uint32 Settings::t2_dts() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.t2_dts)
  return t2_dts_;
}
inline void Settings::set_t2_dts(::google::protobuf::uint32 value) {
  set_has_t2_dts();
  t2_dts_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.t2_dts)
}

// optional uint32 t3_dts = 18;
inline bool Settings::has_t3_dts() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Settings::set_has_t3_dts() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Settings::clear_has_t3_dts() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Settings::clear_t3_dts() {
  t3_dts_ = 0u;
  clear_has_t3_dts();
}
inline ::google::protobuf::uint32 Settings::t3_dts() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.t3_dts)
  return t3_dts_;
}
inline void Settings::set_t3_dts(::google::protobuf::uint32 value) {
  set_has_t3_dts();
  t3_dts_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.t3_dts)
}

// optional uint32 t4_dts = 19;
inline bool Settings::has_t4_dts() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Settings::set_has_t4_dts() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Settings::clear_has_t4_dts() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Settings::clear_t4_dts() {
  t4_dts_ = 0u;
  clear_has_t4_dts();
}
inline ::google::protobuf::uint32 Settings::t4_dts() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Settings.t4_dts)
  return t4_dts_;
}
inline void Settings::set_t4_dts(::google::protobuf::uint32 value) {
  set_has_t4_dts();
  t4_dts_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Settings.t4_dts)
}

// -------------------------------------------------------------------

// Data

// optional .dolphindaq.diode.Trace trace = 1;
inline bool Data::has_trace() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_trace() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_trace() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_trace() {
  if (trace_ != NULL) trace_->Clear();
  clear_has_trace();
}
inline const ::dolphindaq::diode::Trace& Data::_internal_trace() const {
  return *trace_;
}
inline const ::dolphindaq::diode::Trace& Data::trace() const {
  const ::dolphindaq::diode::Trace* p = trace_;
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Data.trace)
  return p != NULL ? *p : *reinterpret_cast<const ::dolphindaq::diode::Trace*>(
      &::dolphindaq::diode::_Trace_default_instance_);
}
inline ::dolphindaq::diode::Trace* Data::release_trace() {
  // @@protoc_insertion_point(field_release:dolphindaq.diode.Data.trace)
  clear_has_trace();
  ::dolphindaq::diode::Trace* temp = trace_;
  trace_ = NULL;
  return temp;
}
inline ::dolphindaq::diode::Trace* Data::mutable_trace() {
  set_has_trace();
  if (trace_ == NULL) {
    auto* p = CreateMaybeMessage<::dolphindaq::diode::Trace>(GetArenaNoVirtual());
    trace_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dolphindaq.diode.Data.trace)
  return trace_;
}
inline void Data::set_allocated_trace(::dolphindaq::diode::Trace* trace) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trace_;
  }
  if (trace) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trace = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trace, submessage_arena);
    }
    set_has_trace();
  } else {
    clear_has_trace();
  }
  trace_ = trace;
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.diode.Data.trace)
}

// optional .dolphindaq.diode.Metrics metrics = 2;
inline bool Data::has_metrics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_metrics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_metrics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_metrics() {
  if (metrics_ != NULL) metrics_->Clear();
  clear_has_metrics();
}
inline const ::dolphindaq::diode::Metrics& Data::_internal_metrics() const {
  return *metrics_;
}
inline const ::dolphindaq::diode::Metrics& Data::metrics() const {
  const ::dolphindaq::diode::Metrics* p = metrics_;
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Data.metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::dolphindaq::diode::Metrics*>(
      &::dolphindaq::diode::_Metrics_default_instance_);
}
inline ::dolphindaq::diode::Metrics* Data::release_metrics() {
  // @@protoc_insertion_point(field_release:dolphindaq.diode.Data.metrics)
  clear_has_metrics();
  ::dolphindaq::diode::Metrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
inline ::dolphindaq::diode::Metrics* Data::mutable_metrics() {
  set_has_metrics();
  if (metrics_ == NULL) {
    auto* p = CreateMaybeMessage<::dolphindaq::diode::Metrics>(GetArenaNoVirtual());
    metrics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dolphindaq.diode.Data.metrics)
  return metrics_;
}
inline void Data::set_allocated_metrics(::dolphindaq::diode::Metrics* metrics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metrics_;
  }
  if (metrics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      metrics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metrics, submessage_arena);
    }
    set_has_metrics();
  } else {
    clear_has_metrics();
  }
  metrics_ = metrics;
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.diode.Data.metrics)
}

// -------------------------------------------------------------------

// Trace

// optional uint64 shot_num = 1;
inline bool Trace::has_shot_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Trace::set_has_shot_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Trace::clear_has_shot_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Trace::clear_shot_num() {
  shot_num_ = GOOGLE_ULONGLONG(0);
  clear_has_shot_num();
}
inline ::google::protobuf::uint64 Trace::shot_num() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Trace.shot_num)
  return shot_num_;
}
inline void Trace::set_shot_num(::google::protobuf::uint64 value) {
  set_has_shot_num();
  shot_num_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Trace.shot_num)
}

// optional .google.protobuf.Timestamp shot_time = 2;
inline bool Trace::has_shot_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Trace::set_has_shot_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Trace::clear_has_shot_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::google::protobuf::Timestamp& Trace::_internal_shot_time() const {
  return *shot_time_;
}
inline const ::google::protobuf::Timestamp& Trace::shot_time() const {
  const ::google::protobuf::Timestamp* p = shot_time_;
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Trace.shot_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Trace::release_shot_time() {
  // @@protoc_insertion_point(field_release:dolphindaq.diode.Trace.shot_time)
  clear_has_shot_time();
  ::google::protobuf::Timestamp* temp = shot_time_;
  shot_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Trace::mutable_shot_time() {
  set_has_shot_time();
  if (shot_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    shot_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dolphindaq.diode.Trace.shot_time)
  return shot_time_;
}
inline void Trace::set_allocated_shot_time(::google::protobuf::Timestamp* shot_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(shot_time_);
  }
  if (shot_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(shot_time)->GetArena();
    if (message_arena != submessage_arena) {
      shot_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shot_time, submessage_arena);
    }
    set_has_shot_time();
  } else {
    clear_has_shot_time();
  }
  shot_time_ = shot_time;
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.diode.Trace.shot_time)
}

// optional bytes yvals = 3;
inline bool Trace::has_yvals() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trace::set_has_yvals() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trace::clear_has_yvals() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trace::clear_yvals() {
  yvals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_yvals();
}
inline const ::std::string& Trace::yvals() const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Trace.yvals)
  return yvals_.GetNoArena();
}
inline void Trace::set_yvals(const ::std::string& value) {
  set_has_yvals();
  yvals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Trace.yvals)
}
#if LANG_CXX11
inline void Trace::set_yvals(::std::string&& value) {
  set_has_yvals();
  yvals_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dolphindaq.diode.Trace.yvals)
}
#endif
inline void Trace::set_yvals(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_yvals();
  yvals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dolphindaq.diode.Trace.yvals)
}
inline void Trace::set_yvals(const void* value, size_t size) {
  set_has_yvals();
  yvals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dolphindaq.diode.Trace.yvals)
}
inline ::std::string* Trace::mutable_yvals() {
  set_has_yvals();
  // @@protoc_insertion_point(field_mutable:dolphindaq.diode.Trace.yvals)
  return yvals_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trace::release_yvals() {
  // @@protoc_insertion_point(field_release:dolphindaq.diode.Trace.yvals)
  if (!has_yvals()) {
    return NULL;
  }
  clear_has_yvals();
  return yvals_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trace::set_allocated_yvals(::std::string* yvals) {
  if (yvals != NULL) {
    set_has_yvals();
  } else {
    clear_has_yvals();
  }
  yvals_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), yvals);
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.diode.Trace.yvals)
}

// -------------------------------------------------------------------

// Metrics

// repeated uint64 shot_num = 1;
inline int Metrics::shot_num_size() const {
  return shot_num_.size();
}
inline void Metrics::clear_shot_num() {
  shot_num_.Clear();
}
inline ::google::protobuf::uint64 Metrics::shot_num(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.shot_num)
  return shot_num_.Get(index);
}
inline void Metrics::set_shot_num(int index, ::google::protobuf::uint64 value) {
  shot_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.shot_num)
}
inline void Metrics::add_shot_num(::google::protobuf::uint64 value) {
  shot_num_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.shot_num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Metrics::shot_num() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.shot_num)
  return shot_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Metrics::mutable_shot_num() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.shot_num)
  return &shot_num_;
}

// repeated .google.protobuf.Timestamp shot_time = 2;
inline int Metrics::shot_time_size() const {
  return shot_time_.size();
}
inline ::google::protobuf::Timestamp* Metrics::mutable_shot_time(int index) {
  // @@protoc_insertion_point(field_mutable:dolphindaq.diode.Metrics.shot_time)
  return shot_time_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >*
Metrics::mutable_shot_time() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.shot_time)
  return &shot_time_;
}
inline const ::google::protobuf::Timestamp& Metrics::shot_time(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.shot_time)
  return shot_time_.Get(index);
}
inline ::google::protobuf::Timestamp* Metrics::add_shot_time() {
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.shot_time)
  return shot_time_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >&
Metrics::shot_time() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.shot_time)
  return shot_time_;
}

// repeated int64 shot_time_seconds = 3;
inline int Metrics::shot_time_seconds_size() const {
  return shot_time_seconds_.size();
}
inline void Metrics::clear_shot_time_seconds() {
  shot_time_seconds_.Clear();
}
inline ::google::protobuf::int64 Metrics::shot_time_seconds(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.shot_time_seconds)
  return shot_time_seconds_.Get(index);
}
inline void Metrics::set_shot_time_seconds(int index, ::google::protobuf::int64 value) {
  shot_time_seconds_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.shot_time_seconds)
}
inline void Metrics::add_shot_time_seconds(::google::protobuf::int64 value) {
  shot_time_seconds_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.shot_time_seconds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Metrics::shot_time_seconds() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.shot_time_seconds)
  return shot_time_seconds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Metrics::mutable_shot_time_seconds() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.shot_time_seconds)
  return &shot_time_seconds_;
}

// repeated int32 shot_time_nanos = 4;
inline int Metrics::shot_time_nanos_size() const {
  return shot_time_nanos_.size();
}
inline void Metrics::clear_shot_time_nanos() {
  shot_time_nanos_.Clear();
}
inline ::google::protobuf::int32 Metrics::shot_time_nanos(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.shot_time_nanos)
  return shot_time_nanos_.Get(index);
}
inline void Metrics::set_shot_time_nanos(int index, ::google::protobuf::int32 value) {
  shot_time_nanos_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.shot_time_nanos)
}
inline void Metrics::add_shot_time_nanos(::google::protobuf::int32 value) {
  shot_time_nanos_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.shot_time_nanos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Metrics::shot_time_nanos() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.shot_time_nanos)
  return shot_time_nanos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Metrics::mutable_shot_time_nanos() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.shot_time_nanos)
  return &shot_time_nanos_;
}

// repeated uint64 shot_time_alt_nanos = 5;
inline int Metrics::shot_time_alt_nanos_size() const {
  return shot_time_alt_nanos_.size();
}
inline void Metrics::clear_shot_time_alt_nanos() {
  shot_time_alt_nanos_.Clear();
}
inline ::google::protobuf::uint64 Metrics::shot_time_alt_nanos(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.shot_time_alt_nanos)
  return shot_time_alt_nanos_.Get(index);
}
inline void Metrics::set_shot_time_alt_nanos(int index, ::google::protobuf::uint64 value) {
  shot_time_alt_nanos_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.shot_time_alt_nanos)
}
inline void Metrics::add_shot_time_alt_nanos(::google::protobuf::uint64 value) {
  shot_time_alt_nanos_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.shot_time_alt_nanos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Metrics::shot_time_alt_nanos() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.shot_time_alt_nanos)
  return shot_time_alt_nanos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Metrics::mutable_shot_time_alt_nanos() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.shot_time_alt_nanos)
  return &shot_time_alt_nanos_;
}

// repeated uint64 global_sum = 6;
inline int Metrics::global_sum_size() const {
  return global_sum_.size();
}
inline void Metrics::clear_global_sum() {
  global_sum_.Clear();
}
inline ::google::protobuf::uint64 Metrics::global_sum(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.global_sum)
  return global_sum_.Get(index);
}
inline void Metrics::set_global_sum(int index, ::google::protobuf::uint64 value) {
  global_sum_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.global_sum)
}
inline void Metrics::add_global_sum(::google::protobuf::uint64 value) {
  global_sum_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.global_sum)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Metrics::global_sum() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.global_sum)
  return global_sum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Metrics::mutable_global_sum() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.global_sum)
  return &global_sum_;
}

// repeated double global_mean = 7;
inline int Metrics::global_mean_size() const {
  return global_mean_.size();
}
inline void Metrics::clear_global_mean() {
  global_mean_.Clear();
}
inline double Metrics::global_mean(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.global_mean)
  return global_mean_.Get(index);
}
inline void Metrics::set_global_mean(int index, double value) {
  global_mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.global_mean)
}
inline void Metrics::add_global_mean(double value) {
  global_mean_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.global_mean)
}
inline const ::google::protobuf::RepeatedField< double >&
Metrics::global_mean() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.global_mean)
  return global_mean_;
}
inline ::google::protobuf::RepeatedField< double >*
Metrics::mutable_global_mean() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.global_mean)
  return &global_mean_;
}

// repeated uint64 global_max = 8;
inline int Metrics::global_max_size() const {
  return global_max_.size();
}
inline void Metrics::clear_global_max() {
  global_max_.Clear();
}
inline ::google::protobuf::uint64 Metrics::global_max(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.global_max)
  return global_max_.Get(index);
}
inline void Metrics::set_global_max(int index, ::google::protobuf::uint64 value) {
  global_max_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.global_max)
}
inline void Metrics::add_global_max(::google::protobuf::uint64 value) {
  global_max_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.global_max)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Metrics::global_max() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.global_max)
  return global_max_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Metrics::mutable_global_max() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.global_max)
  return &global_max_;
}

// repeated uint64 global_min = 9;
inline int Metrics::global_min_size() const {
  return global_min_.size();
}
inline void Metrics::clear_global_min() {
  global_min_.Clear();
}
inline ::google::protobuf::uint64 Metrics::global_min(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.global_min)
  return global_min_.Get(index);
}
inline void Metrics::set_global_min(int index, ::google::protobuf::uint64 value) {
  global_min_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.global_min)
}
inline void Metrics::add_global_min(::google::protobuf::uint64 value) {
  global_min_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.global_min)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Metrics::global_min() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.global_min)
  return global_min_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Metrics::mutable_global_min() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.global_min)
  return &global_min_;
}

// repeated uint64 global_peak5 = 10;
inline int Metrics::global_peak5_size() const {
  return global_peak5_.size();
}
inline void Metrics::clear_global_peak5() {
  global_peak5_.Clear();
}
inline ::google::protobuf::uint64 Metrics::global_peak5(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.global_peak5)
  return global_peak5_.Get(index);
}
inline void Metrics::set_global_peak5(int index, ::google::protobuf::uint64 value) {
  global_peak5_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.global_peak5)
}
inline void Metrics::add_global_peak5(::google::protobuf::uint64 value) {
  global_peak5_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.global_peak5)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Metrics::global_peak5() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.global_peak5)
  return global_peak5_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Metrics::mutable_global_peak5() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.global_peak5)
  return &global_peak5_;
}

// repeated double bg_mean = 11;
inline int Metrics::bg_mean_size() const {
  return bg_mean_.size();
}
inline void Metrics::clear_bg_mean() {
  bg_mean_.Clear();
}
inline double Metrics::bg_mean(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.bg_mean)
  return bg_mean_.Get(index);
}
inline void Metrics::set_bg_mean(int index, double value) {
  bg_mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.bg_mean)
}
inline void Metrics::add_bg_mean(double value) {
  bg_mean_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.bg_mean)
}
inline const ::google::protobuf::RepeatedField< double >&
Metrics::bg_mean() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.bg_mean)
  return bg_mean_;
}
inline ::google::protobuf::RepeatedField< double >*
Metrics::mutable_bg_mean() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.bg_mean)
  return &bg_mean_;
}

// repeated double signal_mean = 12;
inline int Metrics::signal_mean_size() const {
  return signal_mean_.size();
}
inline void Metrics::clear_signal_mean() {
  signal_mean_.Clear();
}
inline double Metrics::signal_mean(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.signal_mean)
  return signal_mean_.Get(index);
}
inline void Metrics::set_signal_mean(int index, double value) {
  signal_mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.signal_mean)
}
inline void Metrics::add_signal_mean(double value) {
  signal_mean_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.signal_mean)
}
inline const ::google::protobuf::RepeatedField< double >&
Metrics::signal_mean() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.signal_mean)
  return signal_mean_;
}
inline ::google::protobuf::RepeatedField< double >*
Metrics::mutable_signal_mean() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.signal_mean)
  return &signal_mean_;
}

// repeated double signal_max = 13;
inline int Metrics::signal_max_size() const {
  return signal_max_.size();
}
inline void Metrics::clear_signal_max() {
  signal_max_.Clear();
}
inline double Metrics::signal_max(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.signal_max)
  return signal_max_.Get(index);
}
inline void Metrics::set_signal_max(int index, double value) {
  signal_max_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.signal_max)
}
inline void Metrics::add_signal_max(double value) {
  signal_max_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.signal_max)
}
inline const ::google::protobuf::RepeatedField< double >&
Metrics::signal_max() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.signal_max)
  return signal_max_;
}
inline ::google::protobuf::RepeatedField< double >*
Metrics::mutable_signal_max() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.signal_max)
  return &signal_max_;
}

// repeated double reduced_integ = 14;
inline int Metrics::reduced_integ_size() const {
  return reduced_integ_.size();
}
inline void Metrics::clear_reduced_integ() {
  reduced_integ_.Clear();
}
inline double Metrics::reduced_integ(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.reduced_integ)
  return reduced_integ_.Get(index);
}
inline void Metrics::set_reduced_integ(int index, double value) {
  reduced_integ_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.reduced_integ)
}
inline void Metrics::add_reduced_integ(double value) {
  reduced_integ_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.reduced_integ)
}
inline const ::google::protobuf::RepeatedField< double >&
Metrics::reduced_integ() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.reduced_integ)
  return reduced_integ_;
}
inline ::google::protobuf::RepeatedField< double >*
Metrics::mutable_reduced_integ() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.reduced_integ)
  return &reduced_integ_;
}

// repeated double reduced_mean = 15;
inline int Metrics::reduced_mean_size() const {
  return reduced_mean_.size();
}
inline void Metrics::clear_reduced_mean() {
  reduced_mean_.Clear();
}
inline double Metrics::reduced_mean(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.reduced_mean)
  return reduced_mean_.Get(index);
}
inline void Metrics::set_reduced_mean(int index, double value) {
  reduced_mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.reduced_mean)
}
inline void Metrics::add_reduced_mean(double value) {
  reduced_mean_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.reduced_mean)
}
inline const ::google::protobuf::RepeatedField< double >&
Metrics::reduced_mean() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.reduced_mean)
  return reduced_mean_;
}
inline ::google::protobuf::RepeatedField< double >*
Metrics::mutable_reduced_mean() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.reduced_mean)
  return &reduced_mean_;
}

// repeated double reduced_max = 16;
inline int Metrics::reduced_max_size() const {
  return reduced_max_.size();
}
inline void Metrics::clear_reduced_max() {
  reduced_max_.Clear();
}
inline double Metrics::reduced_max(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.reduced_max)
  return reduced_max_.Get(index);
}
inline void Metrics::set_reduced_max(int index, double value) {
  reduced_max_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.reduced_max)
}
inline void Metrics::add_reduced_max(double value) {
  reduced_max_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.reduced_max)
}
inline const ::google::protobuf::RepeatedField< double >&
Metrics::reduced_max() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.reduced_max)
  return reduced_max_;
}
inline ::google::protobuf::RepeatedField< double >*
Metrics::mutable_reduced_max() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.reduced_max)
  return &reduced_max_;
}

// repeated double custom = 17;
inline int Metrics::custom_size() const {
  return custom_.size();
}
inline void Metrics::clear_custom() {
  custom_.Clear();
}
inline double Metrics::custom(int index) const {
  // @@protoc_insertion_point(field_get:dolphindaq.diode.Metrics.custom)
  return custom_.Get(index);
}
inline void Metrics::set_custom(int index, double value) {
  custom_.Set(index, value);
  // @@protoc_insertion_point(field_set:dolphindaq.diode.Metrics.custom)
}
inline void Metrics::add_custom(double value) {
  custom_.Add(value);
  // @@protoc_insertion_point(field_add:dolphindaq.diode.Metrics.custom)
}
inline const ::google::protobuf::RepeatedField< double >&
Metrics::custom() const {
  // @@protoc_insertion_point(field_list:dolphindaq.diode.Metrics.custom)
  return custom_;
}
inline ::google::protobuf::RepeatedField< double >*
Metrics::mutable_custom() {
  // @@protoc_insertion_point(field_mutable_list:dolphindaq.diode.Metrics.custom)
  return &custom_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace diode
}  // namespace dolphindaq

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_diode_2eproto
