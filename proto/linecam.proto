syntax = "proto2";

package dolphindaq.linecam;

import "google/protobuf/timestamp.proto";

/* TOP-LEVEL MESSAGES */

// Future work:
//   * Define ROIs
//   * Define downsampling of images
//
// Overall (slowly changing) settings; re-create TCP connection whenever settings change
// Send Settings message on every new TCP connection
message Settings {
  optional uint64 start_shot_num = 1; // First shot number for which settings will apply (?)
  optional google.protobuf.Timestamp start_time = 2; // Time after which settings will apply
  optional string sensor = 3; // Camera sensor model name
  optional double exposure = 4; // Camera exposure time, in seconds
  optional uint32 image_nx = 5; // Number of pixel values in the image, matches length of the Image.yvals array
  optional uint32 metrics_batch_size = 6; // Number of images accumulated per single batch of transmitted metrics 
  optional double clk_dt = 7; // Clock dt for reading out the pixels (one pixel is read out per dt step), in seconds
  optional double timtick_secs = 8; // Number of seconds in one CPU-Timer tick (e.g. for TIM1 on the H7 MCU, this would match with the CPU's HRTIM frequency)
  optional uint32 clk_dt_timticks = 9; // Clock dt for exposure and reading out of the pixels (one pixel is read out per dt step), in CPU-Timer ticks
  optional uint32 exposure_clk_dts = 10; // Camera exposure time, in Clock dts
  optional double t1 = 11; // Time delay #1 (external trigger arrival to camera ST [STart] pulse rising edge, in Seconds)
  optional uint32 t1_clk_dts = 12; // Time delay #1, in Clock dts
}

// Send Data message from device to server as often as desired
message Data {
  optional Image image = 1;
  optional Metrics metrics = 2;
}

/* SUB-CATEGORIES OF THE DATA MESSAGE */

// A single, full-resolution line-camera image
message Image {
  optional uint64 shot_num = 1; // Shot number (if exposure time is long, then just the earliest shot number is indicated here)
  optional google.protobuf.Timestamp shot_time = 2; // Shot time from a real-time clock (if exposure time is long, then just the earliest shot time is indicated here)
  optional uint64 shot_time_alt_nanos = 3; // Shot time from an alternate time source: a more-precise, but less accurate, system timer (in nanoseconds). Nanoseconds count up from zero and then roll over (at a max value that depends on the timer). Does not match meaning of Google's timestamp.proto. (if exposure time is long, then just the earliest shot time is indicated here)
  optional bytes yvals = 4; // uint16 raw pixel data; same length of array as specified in Settings.image_nx; (encoding UINT16 is not an option in Google protobufs)
}

// A group of image-to-image metrics (computed on the device)
message Metrics {
  repeated uint64 shot_num = 1; // Shot numbers for these metrics (if exposure time is long, then just the earliest shot number is indicated here)
  repeated google.protobuf.Timestamp shot_time = 2; // Shot times for these metrics, from a real-time clock (if exposure time is long, then just the earliest shot time is indicated here)
  repeated int64 shot_time_seconds = 3; // Shot times for these metrics, from a real-time clock (just the seconds; same meaning as given in Google's timestamp.proto) (if exposure time is long, then just the earliest shot time is indicated here)
  repeated int32 shot_time_nanos = 4; // Shot times for these metrics, from a real-time clock (just the nanoseconds; same meaning as given in Google's timestamp.proto) (if exposure time is long, then just the earliest shot time is indicated here)
  repeated uint64 shot_time_alt_nanos = 5; // Shot times for these metrics from an alternate time source: a more-precise, but less accurate, system timer (in nanoseconds). Nanoseconds count up from zero and then roll over (at a max value that depends on the timer). Does not match meaning of Google's timestamp.proto. (if exposure time is long, then just the earliest shot time is indicated here)
  repeated uint64 image_sum = 6; // Sum of the image, same length as shot_num
  repeated double image_mean = 7; // Mean value of the image, same length as shot_num
  repeated uint64 image_max = 8; // Max value of the image, same length as shot_num
  repeated uint64 image_min = 9; // Min value of the image, same length as shot_num
  repeated double image_custom = 10; // Custom analysis of the image, same length as shot_num 
}