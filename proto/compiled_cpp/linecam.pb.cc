// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linecam.proto

#include "linecam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_linecam_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_linecam_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Image;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_linecam_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Metrics;
}  // namespace protobuf_linecam_2eproto
namespace dolphindaq {
namespace linecam {
class SettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Settings>
      _instance;
} _Settings_default_instance_;
class DataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Data>
      _instance;
} _Data_default_instance_;
class ImageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Image>
      _instance;
} _Image_default_instance_;
class MetricsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Metrics>
      _instance;
} _Metrics_default_instance_;
}  // namespace linecam
}  // namespace dolphindaq
namespace protobuf_linecam_2eproto {
static void InitDefaultsSettings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dolphindaq::linecam::_Settings_default_instance_;
    new (ptr) ::dolphindaq::linecam::Settings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dolphindaq::linecam::Settings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Settings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSettings}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dolphindaq::linecam::_Data_default_instance_;
    new (ptr) ::dolphindaq::linecam::Data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dolphindaq::linecam::Data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsData}, {
      &protobuf_linecam_2eproto::scc_info_Image.base,
      &protobuf_linecam_2eproto::scc_info_Metrics.base,}};

static void InitDefaultsImage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dolphindaq::linecam::_Image_default_instance_;
    new (ptr) ::dolphindaq::linecam::Image();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dolphindaq::linecam::Image::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Image =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsImage}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsMetrics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dolphindaq::linecam::_Metrics_default_instance_;
    new (ptr) ::dolphindaq::linecam::Metrics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dolphindaq::linecam::Metrics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Metrics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMetrics}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Settings.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Data.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Image.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Metrics.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, start_shot_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, exposure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, image_nx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, metrics_batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, clk_dt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, timtick_secs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, clk_dt_timticks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, exposure_clk_dts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, t1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Settings, t1_clk_dts_),
  2,
  1,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Data, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Data, metrics_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Image, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Image, shot_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Image, shot_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Image, shot_time_alt_nanos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Image, yvals_),
  2,
  1,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Metrics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Metrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Metrics, shot_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Metrics, shot_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Metrics, shot_time_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Metrics, shot_time_nanos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Metrics, shot_time_alt_nanos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Metrics, image_sum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Metrics, image_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Metrics, image_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Metrics, image_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dolphindaq::linecam::Metrics, image_custom_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::dolphindaq::linecam::Settings)},
  { 29, 36, sizeof(::dolphindaq::linecam::Data)},
  { 38, 47, sizeof(::dolphindaq::linecam::Image)},
  { 51, 66, sizeof(::dolphindaq::linecam::Metrics)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::dolphindaq::linecam::_Settings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dolphindaq::linecam::_Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dolphindaq::linecam::_Image_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dolphindaq::linecam::_Metrics_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "linecam.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rlinecam.proto\022\022dolphindaq.linecam\032\037goo"
      "gle/protobuf/timestamp.proto\"\233\002\n\010Setting"
      "s\022\026\n\016start_shot_num\030\001 \001(\004\022.\n\nstart_time\030"
      "\002 \001(\0132\032.google.protobuf.Timestamp\022\016\n\006sen"
      "sor\030\003 \001(\t\022\020\n\010exposure\030\004 \001(\001\022\020\n\010image_nx\030"
      "\005 \001(\r\022\032\n\022metrics_batch_size\030\006 \001(\r\022\016\n\006clk"
      "_dt\030\007 \001(\001\022\024\n\014timtick_secs\030\010 \001(\001\022\027\n\017clk_d"
      "t_timticks\030\t \001(\r\022\030\n\020exposure_clk_dts\030\n \001"
      "(\r\022\n\n\002t1\030\013 \001(\001\022\022\n\nt1_clk_dts\030\014 \001(\r\"^\n\004Da"
      "ta\022(\n\005image\030\001 \001(\0132\031.dolphindaq.linecam.I"
      "mage\022,\n\007metrics\030\002 \001(\0132\033.dolphindaq.linec"
      "am.Metrics\"t\n\005Image\022\020\n\010shot_num\030\001 \001(\004\022-\n"
      "\tshot_time\030\002 \001(\0132\032.google.protobuf.Times"
      "tamp\022\033\n\023shot_time_alt_nanos\030\003 \001(\004\022\r\n\005yva"
      "ls\030\004 \001(\014\"\376\001\n\007Metrics\022\020\n\010shot_num\030\001 \003(\004\022-"
      "\n\tshot_time\030\002 \003(\0132\032.google.protobuf.Time"
      "stamp\022\031\n\021shot_time_seconds\030\003 \003(\003\022\027\n\017shot"
      "_time_nanos\030\004 \003(\005\022\033\n\023shot_time_alt_nanos"
      "\030\005 \003(\004\022\021\n\timage_sum\030\006 \003(\004\022\022\n\nimage_mean\030"
      "\007 \003(\001\022\021\n\timage_max\030\010 \003(\004\022\021\n\timage_min\030\t "
      "\003(\004\022\024\n\014image_custom\030\n \003(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 825);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "linecam.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_linecam_2eproto
namespace dolphindaq {
namespace linecam {

// ===================================================================

void Settings::InitAsDefaultInstance() {
  ::dolphindaq::linecam::_Settings_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Settings::clear_start_time() {
  if (start_time_ != NULL) start_time_->Clear();
  clear_has_start_time();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Settings::kStartShotNumFieldNumber;
const int Settings::kStartTimeFieldNumber;
const int Settings::kSensorFieldNumber;
const int Settings::kExposureFieldNumber;
const int Settings::kImageNxFieldNumber;
const int Settings::kMetricsBatchSizeFieldNumber;
const int Settings::kClkDtFieldNumber;
const int Settings::kTimtickSecsFieldNumber;
const int Settings::kClkDtTimticksFieldNumber;
const int Settings::kExposureClkDtsFieldNumber;
const int Settings::kT1FieldNumber;
const int Settings::kT1ClkDtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Settings::Settings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_linecam_2eproto::scc_info_Settings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dolphindaq.linecam.Settings)
}
Settings::Settings(const Settings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sensor()) {
    sensor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_);
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  ::memcpy(&start_shot_num_, &from.start_shot_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&t1_clk_dts_) -
    reinterpret_cast<char*>(&start_shot_num_)) + sizeof(t1_clk_dts_));
  // @@protoc_insertion_point(copy_constructor:dolphindaq.linecam.Settings)
}

void Settings::SharedCtor() {
  sensor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t1_clk_dts_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(t1_clk_dts_));
}

Settings::~Settings() {
  // @@protoc_insertion_point(destructor:dolphindaq.linecam.Settings)
  SharedDtor();
}

void Settings::SharedDtor() {
  sensor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
}

void Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Settings::descriptor() {
  ::protobuf_linecam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_linecam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Settings& Settings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_linecam_2eproto::scc_info_Settings.base);
  return *internal_default_instance();
}


void Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:dolphindaq.linecam.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sensor_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(start_time_ != NULL);
      start_time_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&start_shot_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timtick_secs_) -
        reinterpret_cast<char*>(&start_shot_num_)) + sizeof(timtick_secs_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&clk_dt_timticks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&t1_clk_dts_) -
        reinterpret_cast<char*>(&clk_dt_timticks_)) + sizeof(t1_clk_dts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Settings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dolphindaq.linecam.Settings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_shot_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_start_shot_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_shot_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sensor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sensor().data(), static_cast<int>(this->sensor().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dolphindaq.linecam.Settings.sensor");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double exposure = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_exposure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exposure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 image_nx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_image_nx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_nx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 metrics_batch_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_metrics_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metrics_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clk_dt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_clk_dt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clk_dt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timtick_secs = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_timtick_secs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timtick_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clk_dt_timticks = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_clk_dt_timticks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clk_dt_timticks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 exposure_clk_dts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_exposure_clk_dts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exposure_clk_dts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t1 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_t1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 t1_clk_dts = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_t1_clk_dts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t1_clk_dts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dolphindaq.linecam.Settings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dolphindaq.linecam.Settings)
  return false;
#undef DO_
}

void Settings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dolphindaq.linecam.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_shot_num = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_shot_num(), output);
  }

  // optional .google.protobuf.Timestamp start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_start_time(), output);
  }

  // optional string sensor = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor().data(), static_cast<int>(this->sensor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dolphindaq.linecam.Settings.sensor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sensor(), output);
  }

  // optional double exposure = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->exposure(), output);
  }

  // optional uint32 image_nx = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->image_nx(), output);
  }

  // optional uint32 metrics_batch_size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->metrics_batch_size(), output);
  }

  // optional double clk_dt = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->clk_dt(), output);
  }

  // optional double timtick_secs = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->timtick_secs(), output);
  }

  // optional uint32 clk_dt_timticks = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->clk_dt_timticks(), output);
  }

  // optional uint32 exposure_clk_dts = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->exposure_clk_dts(), output);
  }

  // optional double t1 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->t1(), output);
  }

  // optional uint32 t1_clk_dts = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->t1_clk_dts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dolphindaq.linecam.Settings)
}

::google::protobuf::uint8* Settings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dolphindaq.linecam.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_shot_num = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_shot_num(), target);
  }

  // optional .google.protobuf.Timestamp start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_start_time(), deterministic, target);
  }

  // optional string sensor = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor().data(), static_cast<int>(this->sensor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dolphindaq.linecam.Settings.sensor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sensor(), target);
  }

  // optional double exposure = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->exposure(), target);
  }

  // optional uint32 image_nx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->image_nx(), target);
  }

  // optional uint32 metrics_batch_size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->metrics_batch_size(), target);
  }

  // optional double clk_dt = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->clk_dt(), target);
  }

  // optional double timtick_secs = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->timtick_secs(), target);
  }

  // optional uint32 clk_dt_timticks = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->clk_dt_timticks(), target);
  }

  // optional uint32 exposure_clk_dts = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->exposure_clk_dts(), target);
  }

  // optional double t1 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->t1(), target);
  }

  // optional uint32 t1_clk_dts = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->t1_clk_dts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dolphindaq.linecam.Settings)
  return target;
}

size_t Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dolphindaq.linecam.Settings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string sensor = 3;
    if (has_sensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensor());
    }

    // optional .google.protobuf.Timestamp start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *start_time_);
    }

    // optional uint64 start_shot_num = 1;
    if (has_start_shot_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_shot_num());
    }

    // optional double exposure = 4;
    if (has_exposure()) {
      total_size += 1 + 8;
    }

    // optional uint32 image_nx = 5;
    if (has_image_nx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_nx());
    }

    // optional uint32 metrics_batch_size = 6;
    if (has_metrics_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->metrics_batch_size());
    }

    // optional double clk_dt = 7;
    if (has_clk_dt()) {
      total_size += 1 + 8;
    }

    // optional double timtick_secs = 8;
    if (has_timtick_secs()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 clk_dt_timticks = 9;
    if (has_clk_dt_timticks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clk_dt_timticks());
    }

    // optional uint32 exposure_clk_dts = 10;
    if (has_exposure_clk_dts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exposure_clk_dts());
    }

    // optional double t1 = 11;
    if (has_t1()) {
      total_size += 1 + 8;
    }

    // optional uint32 t1_clk_dts = 12;
    if (has_t1_clk_dts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t1_clk_dts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Settings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dolphindaq.linecam.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  const Settings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Settings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dolphindaq.linecam.Settings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dolphindaq.linecam.Settings)
    MergeFrom(*source);
  }
}

void Settings::MergeFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dolphindaq.linecam.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sensor();
      sensor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
    }
    if (cached_has_bits & 0x00000004u) {
      start_shot_num_ = from.start_shot_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      exposure_ = from.exposure_;
    }
    if (cached_has_bits & 0x00000010u) {
      image_nx_ = from.image_nx_;
    }
    if (cached_has_bits & 0x00000020u) {
      metrics_batch_size_ = from.metrics_batch_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      clk_dt_ = from.clk_dt_;
    }
    if (cached_has_bits & 0x00000080u) {
      timtick_secs_ = from.timtick_secs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      clk_dt_timticks_ = from.clk_dt_timticks_;
    }
    if (cached_has_bits & 0x00000200u) {
      exposure_clk_dts_ = from.exposure_clk_dts_;
    }
    if (cached_has_bits & 0x00000400u) {
      t1_ = from.t1_;
    }
    if (cached_has_bits & 0x00000800u) {
      t1_clk_dts_ = from.t1_clk_dts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Settings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dolphindaq.linecam.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settings::CopyFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dolphindaq.linecam.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {
  return true;
}

void Settings::Swap(Settings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Settings::InternalSwap(Settings* other) {
  using std::swap;
  sensor_.Swap(&other->sensor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_time_, other->start_time_);
  swap(start_shot_num_, other->start_shot_num_);
  swap(exposure_, other->exposure_);
  swap(image_nx_, other->image_nx_);
  swap(metrics_batch_size_, other->metrics_batch_size_);
  swap(clk_dt_, other->clk_dt_);
  swap(timtick_secs_, other->timtick_secs_);
  swap(clk_dt_timticks_, other->clk_dt_timticks_);
  swap(exposure_clk_dts_, other->exposure_clk_dts_);
  swap(t1_, other->t1_);
  swap(t1_clk_dts_, other->t1_clk_dts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Settings::GetMetadata() const {
  protobuf_linecam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_linecam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Data::InitAsDefaultInstance() {
  ::dolphindaq::linecam::_Data_default_instance_._instance.get_mutable()->image_ = const_cast< ::dolphindaq::linecam::Image*>(
      ::dolphindaq::linecam::Image::internal_default_instance());
  ::dolphindaq::linecam::_Data_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::dolphindaq::linecam::Metrics*>(
      ::dolphindaq::linecam::Metrics::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kImageFieldNumber;
const int Data::kMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_linecam_2eproto::scc_info_Data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dolphindaq.linecam.Data)
}
Data::Data(const Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image()) {
    image_ = new ::dolphindaq::linecam::Image(*from.image_);
  } else {
    image_ = NULL;
  }
  if (from.has_metrics()) {
    metrics_ = new ::dolphindaq::linecam::Metrics(*from.metrics_);
  } else {
    metrics_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dolphindaq.linecam.Data)
}

void Data::SharedCtor() {
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metrics_) -
      reinterpret_cast<char*>(&image_)) + sizeof(metrics_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:dolphindaq.linecam.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete metrics_;
}

void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  ::protobuf_linecam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_linecam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Data& Data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_linecam_2eproto::scc_info_Data.base);
  return *internal_default_instance();
}


void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:dolphindaq.linecam.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(image_ != NULL);
      image_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(metrics_ != NULL);
      metrics_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dolphindaq.linecam.Data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dolphindaq.linecam.Image image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dolphindaq.linecam.Metrics metrics = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dolphindaq.linecam.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dolphindaq.linecam.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dolphindaq.linecam.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .dolphindaq.linecam.Image image = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_image(), output);
  }

  // optional .dolphindaq.linecam.Metrics metrics = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_metrics(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dolphindaq.linecam.Data)
}

::google::protobuf::uint8* Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dolphindaq.linecam.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .dolphindaq.linecam.Image image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_image(), deterministic, target);
  }

  // optional .dolphindaq.linecam.Metrics metrics = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_metrics(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dolphindaq.linecam.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dolphindaq.linecam.Data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .dolphindaq.linecam.Image image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *image_);
    }

    // optional .dolphindaq.linecam.Metrics metrics = 2;
    if (has_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *metrics_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dolphindaq.linecam.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dolphindaq.linecam.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dolphindaq.linecam.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dolphindaq.linecam.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_image()->::dolphindaq::linecam::Image::MergeFrom(from.image());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_metrics()->::dolphindaq::linecam::Metrics::MergeFrom(from.metrics());
    }
  }
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dolphindaq.linecam.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dolphindaq.linecam.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  using std::swap;
  swap(image_, other->image_);
  swap(metrics_, other->metrics_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_linecam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_linecam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Image::InitAsDefaultInstance() {
  ::dolphindaq::linecam::_Image_default_instance_._instance.get_mutable()->shot_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Image::clear_shot_time() {
  if (shot_time_ != NULL) shot_time_->Clear();
  clear_has_shot_time();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kShotNumFieldNumber;
const int Image::kShotTimeFieldNumber;
const int Image::kShotTimeAltNanosFieldNumber;
const int Image::kYvalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_linecam_2eproto::scc_info_Image.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dolphindaq.linecam.Image)
}
Image::Image(const Image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  yvals_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_yvals()) {
    yvals_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yvals_);
  }
  if (from.has_shot_time()) {
    shot_time_ = new ::google::protobuf::Timestamp(*from.shot_time_);
  } else {
    shot_time_ = NULL;
  }
  ::memcpy(&shot_num_, &from.shot_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&shot_time_alt_nanos_) -
    reinterpret_cast<char*>(&shot_num_)) + sizeof(shot_time_alt_nanos_));
  // @@protoc_insertion_point(copy_constructor:dolphindaq.linecam.Image)
}

void Image::SharedCtor() {
  yvals_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&shot_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shot_time_alt_nanos_) -
      reinterpret_cast<char*>(&shot_time_)) + sizeof(shot_time_alt_nanos_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:dolphindaq.linecam.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  yvals_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shot_time_;
}

void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  ::protobuf_linecam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_linecam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Image& Image::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_linecam_2eproto::scc_info_Image.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:dolphindaq.linecam.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      yvals_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shot_time_ != NULL);
      shot_time_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&shot_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shot_time_alt_nanos_) -
        reinterpret_cast<char*>(&shot_num_)) + sizeof(shot_time_alt_nanos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dolphindaq.linecam.Image)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 shot_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_shot_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shot_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp shot_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shot_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 shot_time_alt_nanos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_shot_time_alt_nanos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shot_time_alt_nanos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes yvals = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_yvals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dolphindaq.linecam.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dolphindaq.linecam.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dolphindaq.linecam.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 shot_num = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->shot_num(), output);
  }

  // optional .google.protobuf.Timestamp shot_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_shot_time(), output);
  }

  // optional uint64 shot_time_alt_nanos = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->shot_time_alt_nanos(), output);
  }

  // optional bytes yvals = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->yvals(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dolphindaq.linecam.Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dolphindaq.linecam.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 shot_num = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->shot_num(), target);
  }

  // optional .google.protobuf.Timestamp shot_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_shot_time(), deterministic, target);
  }

  // optional uint64 shot_time_alt_nanos = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->shot_time_alt_nanos(), target);
  }

  // optional bytes yvals = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->yvals(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dolphindaq.linecam.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dolphindaq.linecam.Image)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes yvals = 4;
    if (has_yvals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->yvals());
    }

    // optional .google.protobuf.Timestamp shot_time = 2;
    if (has_shot_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shot_time_);
    }

    // optional uint64 shot_num = 1;
    if (has_shot_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shot_num());
    }

    // optional uint64 shot_time_alt_nanos = 3;
    if (has_shot_time_alt_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shot_time_alt_nanos());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dolphindaq.linecam.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dolphindaq.linecam.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dolphindaq.linecam.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dolphindaq.linecam.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_yvals();
      yvals_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yvals_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_shot_time()->::google::protobuf::Timestamp::MergeFrom(from.shot_time());
    }
    if (cached_has_bits & 0x00000004u) {
      shot_num_ = from.shot_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      shot_time_alt_nanos_ = from.shot_time_alt_nanos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dolphindaq.linecam.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dolphindaq.linecam.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  using std::swap;
  yvals_.Swap(&other->yvals_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shot_time_, other->shot_time_);
  swap(shot_num_, other->shot_num_);
  swap(shot_time_alt_nanos_, other->shot_time_alt_nanos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_linecam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_linecam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Metrics::InitAsDefaultInstance() {
}
void Metrics::clear_shot_time() {
  shot_time_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metrics::kShotNumFieldNumber;
const int Metrics::kShotTimeFieldNumber;
const int Metrics::kShotTimeSecondsFieldNumber;
const int Metrics::kShotTimeNanosFieldNumber;
const int Metrics::kShotTimeAltNanosFieldNumber;
const int Metrics::kImageSumFieldNumber;
const int Metrics::kImageMeanFieldNumber;
const int Metrics::kImageMaxFieldNumber;
const int Metrics::kImageMinFieldNumber;
const int Metrics::kImageCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metrics::Metrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_linecam_2eproto::scc_info_Metrics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dolphindaq.linecam.Metrics)
}
Metrics::Metrics(const Metrics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      shot_num_(from.shot_num_),
      shot_time_(from.shot_time_),
      shot_time_seconds_(from.shot_time_seconds_),
      shot_time_nanos_(from.shot_time_nanos_),
      shot_time_alt_nanos_(from.shot_time_alt_nanos_),
      image_sum_(from.image_sum_),
      image_mean_(from.image_mean_),
      image_max_(from.image_max_),
      image_min_(from.image_min_),
      image_custom_(from.image_custom_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dolphindaq.linecam.Metrics)
}

void Metrics::SharedCtor() {
}

Metrics::~Metrics() {
  // @@protoc_insertion_point(destructor:dolphindaq.linecam.Metrics)
  SharedDtor();
}

void Metrics::SharedDtor() {
}

void Metrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Metrics::descriptor() {
  ::protobuf_linecam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_linecam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Metrics& Metrics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_linecam_2eproto::scc_info_Metrics.base);
  return *internal_default_instance();
}


void Metrics::Clear() {
// @@protoc_insertion_point(message_clear_start:dolphindaq.linecam.Metrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shot_num_.Clear();
  shot_time_.Clear();
  shot_time_seconds_.Clear();
  shot_time_nanos_.Clear();
  shot_time_alt_nanos_.Clear();
  image_sum_.Clear();
  image_mean_.Clear();
  image_max_.Clear();
  image_min_.Clear();
  image_custom_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Metrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dolphindaq.linecam.Metrics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 shot_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_shot_num())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_shot_num())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Timestamp shot_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_shot_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 shot_time_seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24u, input, this->mutable_shot_time_seconds())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shot_time_seconds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 shot_time_nanos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_shot_time_nanos())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shot_time_nanos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 shot_time_alt_nanos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40u, input, this->mutable_shot_time_alt_nanos())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_shot_time_alt_nanos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 image_sum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48u, input, this->mutable_image_sum())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_image_sum())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double image_mean = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57u, input, this->mutable_image_mean())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_image_mean())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 image_max = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64u, input, this->mutable_image_max())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_image_max())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 image_min = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 72u, input, this->mutable_image_min())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_image_min())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double image_custom = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81u, input, this->mutable_image_custom())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_image_custom())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dolphindaq.linecam.Metrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dolphindaq.linecam.Metrics)
  return false;
#undef DO_
}

void Metrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dolphindaq.linecam.Metrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 shot_num = 1;
  for (int i = 0, n = this->shot_num_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->shot_num(i), output);
  }

  // repeated .google.protobuf.Timestamp shot_time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shot_time_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->shot_time(static_cast<int>(i)),
      output);
  }

  // repeated int64 shot_time_seconds = 3;
  for (int i = 0, n = this->shot_time_seconds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->shot_time_seconds(i), output);
  }

  // repeated int32 shot_time_nanos = 4;
  for (int i = 0, n = this->shot_time_nanos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->shot_time_nanos(i), output);
  }

  // repeated uint64 shot_time_alt_nanos = 5;
  for (int i = 0, n = this->shot_time_alt_nanos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->shot_time_alt_nanos(i), output);
  }

  // repeated uint64 image_sum = 6;
  for (int i = 0, n = this->image_sum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->image_sum(i), output);
  }

  // repeated double image_mean = 7;
  for (int i = 0, n = this->image_mean_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->image_mean(i), output);
  }

  // repeated uint64 image_max = 8;
  for (int i = 0, n = this->image_max_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->image_max(i), output);
  }

  // repeated uint64 image_min = 9;
  for (int i = 0, n = this->image_min_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      9, this->image_min(i), output);
  }

  // repeated double image_custom = 10;
  for (int i = 0, n = this->image_custom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->image_custom(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dolphindaq.linecam.Metrics)
}

::google::protobuf::uint8* Metrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dolphindaq.linecam.Metrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 shot_num = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->shot_num_, target);

  // repeated .google.protobuf.Timestamp shot_time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shot_time_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->shot_time(static_cast<int>(i)), deterministic, target);
  }

  // repeated int64 shot_time_seconds = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(3, this->shot_time_seconds_, target);

  // repeated int32 shot_time_nanos = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->shot_time_nanos_, target);

  // repeated uint64 shot_time_alt_nanos = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(5, this->shot_time_alt_nanos_, target);

  // repeated uint64 image_sum = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(6, this->image_sum_, target);

  // repeated double image_mean = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(7, this->image_mean_, target);

  // repeated uint64 image_max = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(8, this->image_max_, target);

  // repeated uint64 image_min = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(9, this->image_min_, target);

  // repeated double image_custom = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(10, this->image_custom_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dolphindaq.linecam.Metrics)
  return target;
}

size_t Metrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dolphindaq.linecam.Metrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 shot_num = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->shot_num_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->shot_num_size());
    total_size += data_size;
  }

  // repeated .google.protobuf.Timestamp shot_time = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->shot_time_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->shot_time(static_cast<int>(i)));
    }
  }

  // repeated int64 shot_time_seconds = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->shot_time_seconds_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->shot_time_seconds_size());
    total_size += data_size;
  }

  // repeated int32 shot_time_nanos = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->shot_time_nanos_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->shot_time_nanos_size());
    total_size += data_size;
  }

  // repeated uint64 shot_time_alt_nanos = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->shot_time_alt_nanos_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->shot_time_alt_nanos_size());
    total_size += data_size;
  }

  // repeated uint64 image_sum = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->image_sum_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->image_sum_size());
    total_size += data_size;
  }

  // repeated double image_mean = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->image_mean_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->image_mean_size());
    total_size += data_size;
  }

  // repeated uint64 image_max = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->image_max_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->image_max_size());
    total_size += data_size;
  }

  // repeated uint64 image_min = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->image_min_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->image_min_size());
    total_size += data_size;
  }

  // repeated double image_custom = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->image_custom_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->image_custom_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dolphindaq.linecam.Metrics)
  GOOGLE_DCHECK_NE(&from, this);
  const Metrics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Metrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dolphindaq.linecam.Metrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dolphindaq.linecam.Metrics)
    MergeFrom(*source);
  }
}

void Metrics::MergeFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dolphindaq.linecam.Metrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shot_num_.MergeFrom(from.shot_num_);
  shot_time_.MergeFrom(from.shot_time_);
  shot_time_seconds_.MergeFrom(from.shot_time_seconds_);
  shot_time_nanos_.MergeFrom(from.shot_time_nanos_);
  shot_time_alt_nanos_.MergeFrom(from.shot_time_alt_nanos_);
  image_sum_.MergeFrom(from.image_sum_);
  image_mean_.MergeFrom(from.image_mean_);
  image_max_.MergeFrom(from.image_max_);
  image_min_.MergeFrom(from.image_min_);
  image_custom_.MergeFrom(from.image_custom_);
}

void Metrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dolphindaq.linecam.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metrics::CopyFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dolphindaq.linecam.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metrics::IsInitialized() const {
  return true;
}

void Metrics::Swap(Metrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metrics::InternalSwap(Metrics* other) {
  using std::swap;
  shot_num_.InternalSwap(&other->shot_num_);
  CastToBase(&shot_time_)->InternalSwap(CastToBase(&other->shot_time_));
  shot_time_seconds_.InternalSwap(&other->shot_time_seconds_);
  shot_time_nanos_.InternalSwap(&other->shot_time_nanos_);
  shot_time_alt_nanos_.InternalSwap(&other->shot_time_alt_nanos_);
  image_sum_.InternalSwap(&other->image_sum_);
  image_mean_.InternalSwap(&other->image_mean_);
  image_max_.InternalSwap(&other->image_max_);
  image_min_.InternalSwap(&other->image_min_);
  image_custom_.InternalSwap(&other->image_custom_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Metrics::GetMetadata() const {
  protobuf_linecam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_linecam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace linecam
}  // namespace dolphindaq
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dolphindaq::linecam::Settings* Arena::CreateMaybeMessage< ::dolphindaq::linecam::Settings >(Arena* arena) {
  return Arena::CreateInternal< ::dolphindaq::linecam::Settings >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dolphindaq::linecam::Data* Arena::CreateMaybeMessage< ::dolphindaq::linecam::Data >(Arena* arena) {
  return Arena::CreateInternal< ::dolphindaq::linecam::Data >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dolphindaq::linecam::Image* Arena::CreateMaybeMessage< ::dolphindaq::linecam::Image >(Arena* arena) {
  return Arena::CreateInternal< ::dolphindaq::linecam::Image >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dolphindaq::linecam::Metrics* Arena::CreateMaybeMessage< ::dolphindaq::linecam::Metrics >(Arena* arena) {
  return Arena::CreateInternal< ::dolphindaq::linecam::Metrics >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
