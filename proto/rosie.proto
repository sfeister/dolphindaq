syntax = "proto2";

package dolphindaq.rosie;

import "google/protobuf/timestamp.proto";

/* TOP-LEVEL MESSAGES */

// Overall (slowly changing) settings; re-create TCP connection whenever settings change
// Send Settings message on every new TCP connection
message Settings {
  optional uint64 start_shot_num = 1; // First shot number for which settings will apply (?)
  optional google.protobuf.Timestamp start_time = 2; // Time after which settings will apply
  optional uint32 metrics_batch_size = 3; // Number of shots accumulated per single batch of transmitted metrics 
}

// Send Data message from device to server as often as desired
message Data {
  optional Metrics metrics = 1;
}

/* SUB-CATEGORIES OF THE DATA MESSAGE */

// A group of shot-to-shot metrics (computed on the device)
message Metrics {
  repeated uint64 shot_num = 1; // Shot numbers for these metrics
  repeated google.protobuf.Timestamp shot_time = 2; // Shot times for these metrics, from a real-time clock
  repeated int64 shot_time_seconds = 3; // Shot times for these metrics, from a real-time clock (just the seconds; same meaning as given in Google's timestamp.proto)
  repeated int32 shot_time_nanos = 4; // Shot times for these metrics, from a real-time clock (just the nanoseconds; same meaning as given in Google's timestamp.proto)
  repeated uint64 shot_time_alt_nanos = 5; // Shot times for these metrics from an alternate time source: a more-precise, but less accurate, system timer (in nanoseconds). Nanoseconds count up from zero and then roll over (at a max value that depends on the timer). Does not match meaning of Google's timestamp.proto.
}

