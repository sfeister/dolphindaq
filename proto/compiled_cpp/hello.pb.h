// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hello.proto

#ifndef PROTOBUF_INCLUDED_hello_2eproto
#define PROTOBUF_INCLUDED_hello_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_hello_2eproto 

namespace protobuf_hello_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_hello_2eproto
namespace dolphindaq {
class Hello;
class HelloDefaultTypeInternal;
extern HelloDefaultTypeInternal _Hello_default_instance_;
}  // namespace dolphindaq
namespace google {
namespace protobuf {
template<> ::dolphindaq::Hello* Arena::CreateMaybeMessage<::dolphindaq::Hello>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dolphindaq {

enum Hello_DeviceType {
  Hello_DeviceType_OTHER = 0,
  Hello_DeviceType_DIODE = 1,
  Hello_DeviceType_LINECAM = 2,
  Hello_DeviceType_ROSIE = 3
};
bool Hello_DeviceType_IsValid(int value);
const Hello_DeviceType Hello_DeviceType_DeviceType_MIN = Hello_DeviceType_OTHER;
const Hello_DeviceType Hello_DeviceType_DeviceType_MAX = Hello_DeviceType_ROSIE;
const int Hello_DeviceType_DeviceType_ARRAYSIZE = Hello_DeviceType_DeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Hello_DeviceType_descriptor();
inline const ::std::string& Hello_DeviceType_Name(Hello_DeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Hello_DeviceType_descriptor(), value);
}
inline bool Hello_DeviceType_Parse(
    const ::std::string& name, Hello_DeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Hello_DeviceType>(
    Hello_DeviceType_descriptor(), name, value);
}
// ===================================================================

class Hello : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dolphindaq.Hello) */ {
 public:
  Hello();
  virtual ~Hello();

  Hello(const Hello& from);

  inline Hello& operator=(const Hello& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hello(Hello&& from) noexcept
    : Hello() {
    *this = ::std::move(from);
  }

  inline Hello& operator=(Hello&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hello* internal_default_instance() {
    return reinterpret_cast<const Hello*>(
               &_Hello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Hello* other);
  friend void swap(Hello& a, Hello& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hello* New() const final {
    return CreateMaybeMessage<Hello>(NULL);
  }

  Hello* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Hello>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Hello& from);
  void MergeFrom(const Hello& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Hello_DeviceType DeviceType;
  static const DeviceType OTHER =
    Hello_DeviceType_OTHER;
  static const DeviceType DIODE =
    Hello_DeviceType_DIODE;
  static const DeviceType LINECAM =
    Hello_DeviceType_LINECAM;
  static const DeviceType ROSIE =
    Hello_DeviceType_ROSIE;
  static inline bool DeviceType_IsValid(int value) {
    return Hello_DeviceType_IsValid(value);
  }
  static const DeviceType DeviceType_MIN =
    Hello_DeviceType_DeviceType_MIN;
  static const DeviceType DeviceType_MAX =
    Hello_DeviceType_DeviceType_MAX;
  static const int DeviceType_ARRAYSIZE =
    Hello_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeviceType_descriptor() {
    return Hello_DeviceType_descriptor();
  }
  static inline const ::std::string& DeviceType_Name(DeviceType value) {
    return Hello_DeviceType_Name(value);
  }
  static inline bool DeviceType_Parse(const ::std::string& name,
      DeviceType* value) {
    return Hello_DeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string unique_name = 1;
  bool has_unique_name() const;
  void clear_unique_name();
  static const int kUniqueNameFieldNumber = 1;
  const ::std::string& unique_name() const;
  void set_unique_name(const ::std::string& value);
  #if LANG_CXX11
  void set_unique_name(::std::string&& value);
  #endif
  void set_unique_name(const char* value);
  void set_unique_name(const char* value, size_t size);
  ::std::string* mutable_unique_name();
  ::std::string* release_unique_name();
  void set_allocated_unique_name(::std::string* unique_name);

  // optional int64 unique_id = 2;
  bool has_unique_id() const;
  void clear_unique_id();
  static const int kUniqueIdFieldNumber = 2;
  ::google::protobuf::int64 unique_id() const;
  void set_unique_id(::google::protobuf::int64 value);

  // optional .dolphindaq.Hello.DeviceType device_type = 3;
  bool has_device_type() const;
  void clear_device_type();
  static const int kDeviceTypeFieldNumber = 3;
  ::dolphindaq::Hello_DeviceType device_type() const;
  void set_device_type(::dolphindaq::Hello_DeviceType value);

  // @@protoc_insertion_point(class_scope:dolphindaq.Hello)
 private:
  void set_has_unique_name();
  void clear_has_unique_name();
  void set_has_unique_id();
  void clear_has_unique_id();
  void set_has_device_type();
  void clear_has_device_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr unique_name_;
  ::google::protobuf::int64 unique_id_;
  int device_type_;
  friend struct ::protobuf_hello_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Hello

// optional string unique_name = 1;
inline bool Hello::has_unique_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hello::set_has_unique_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Hello::clear_has_unique_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Hello::clear_unique_name() {
  unique_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unique_name();
}
inline const ::std::string& Hello::unique_name() const {
  // @@protoc_insertion_point(field_get:dolphindaq.Hello.unique_name)
  return unique_name_.GetNoArena();
}
inline void Hello::set_unique_name(const ::std::string& value) {
  set_has_unique_name();
  unique_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dolphindaq.Hello.unique_name)
}
#if LANG_CXX11
inline void Hello::set_unique_name(::std::string&& value) {
  set_has_unique_name();
  unique_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dolphindaq.Hello.unique_name)
}
#endif
inline void Hello::set_unique_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unique_name();
  unique_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dolphindaq.Hello.unique_name)
}
inline void Hello::set_unique_name(const char* value, size_t size) {
  set_has_unique_name();
  unique_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dolphindaq.Hello.unique_name)
}
inline ::std::string* Hello::mutable_unique_name() {
  set_has_unique_name();
  // @@protoc_insertion_point(field_mutable:dolphindaq.Hello.unique_name)
  return unique_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Hello::release_unique_name() {
  // @@protoc_insertion_point(field_release:dolphindaq.Hello.unique_name)
  if (!has_unique_name()) {
    return NULL;
  }
  clear_has_unique_name();
  return unique_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hello::set_allocated_unique_name(::std::string* unique_name) {
  if (unique_name != NULL) {
    set_has_unique_name();
  } else {
    clear_has_unique_name();
  }
  unique_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_name);
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.Hello.unique_name)
}

// optional int64 unique_id = 2;
inline bool Hello::has_unique_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hello::set_has_unique_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Hello::clear_has_unique_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Hello::clear_unique_id() {
  unique_id_ = GOOGLE_LONGLONG(0);
  clear_has_unique_id();
}
inline ::google::protobuf::int64 Hello::unique_id() const {
  // @@protoc_insertion_point(field_get:dolphindaq.Hello.unique_id)
  return unique_id_;
}
inline void Hello::set_unique_id(::google::protobuf::int64 value) {
  set_has_unique_id();
  unique_id_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.Hello.unique_id)
}

// optional .dolphindaq.Hello.DeviceType device_type = 3;
inline bool Hello::has_device_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Hello::set_has_device_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Hello::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Hello::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
inline ::dolphindaq::Hello_DeviceType Hello::device_type() const {
  // @@protoc_insertion_point(field_get:dolphindaq.Hello.device_type)
  return static_cast< ::dolphindaq::Hello_DeviceType >(device_type_);
}
inline void Hello::set_device_type(::dolphindaq::Hello_DeviceType value) {
  assert(::dolphindaq::Hello_DeviceType_IsValid(value));
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.Hello.device_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dolphindaq

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dolphindaq::Hello_DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dolphindaq::Hello_DeviceType>() {
  return ::dolphindaq::Hello_DeviceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_hello_2eproto
