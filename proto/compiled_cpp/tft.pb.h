// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tft.proto

#ifndef PROTOBUF_INCLUDED_tft_2eproto
#define PROTOBUF_INCLUDED_tft_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tft_2eproto 

namespace protobuf_tft_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tft_2eproto
namespace dolphindaq {
namespace tft {
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ShotAlert;
class ShotAlertDefaultTypeInternal;
extern ShotAlertDefaultTypeInternal _ShotAlert_default_instance_;
}  // namespace tft
}  // namespace dolphindaq
namespace google {
namespace protobuf {
template<> ::dolphindaq::tft::Image* Arena::CreateMaybeMessage<::dolphindaq::tft::Image>(Arena*);
template<> ::dolphindaq::tft::ShotAlert* Arena::CreateMaybeMessage<::dolphindaq::tft::ShotAlert>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dolphindaq {
namespace tft {

// ===================================================================

class ShotAlert : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dolphindaq.tft.ShotAlert) */ {
 public:
  ShotAlert();
  virtual ~ShotAlert();

  ShotAlert(const ShotAlert& from);

  inline ShotAlert& operator=(const ShotAlert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShotAlert(ShotAlert&& from) noexcept
    : ShotAlert() {
    *this = ::std::move(from);
  }

  inline ShotAlert& operator=(ShotAlert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShotAlert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShotAlert* internal_default_instance() {
    return reinterpret_cast<const ShotAlert*>(
               &_ShotAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ShotAlert* other);
  friend void swap(ShotAlert& a, ShotAlert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShotAlert* New() const final {
    return CreateMaybeMessage<ShotAlert>(NULL);
  }

  ShotAlert* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShotAlert>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShotAlert& from);
  void MergeFrom(const ShotAlert& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShotAlert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.Timestamp shot_time = 2;
  bool has_shot_time() const;
  void clear_shot_time();
  static const int kShotTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_shot_time() const;
  public:
  const ::google::protobuf::Timestamp& shot_time() const;
  ::google::protobuf::Timestamp* release_shot_time();
  ::google::protobuf::Timestamp* mutable_shot_time();
  void set_allocated_shot_time(::google::protobuf::Timestamp* shot_time);

  // optional uint64 shot_num = 1;
  bool has_shot_num() const;
  void clear_shot_num();
  static const int kShotNumFieldNumber = 1;
  ::google::protobuf::uint64 shot_num() const;
  void set_shot_num(::google::protobuf::uint64 value);

  // optional uint64 shot_time_alt_nanos = 3;
  bool has_shot_time_alt_nanos() const;
  void clear_shot_time_alt_nanos();
  static const int kShotTimeAltNanosFieldNumber = 3;
  ::google::protobuf::uint64 shot_time_alt_nanos() const;
  void set_shot_time_alt_nanos(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dolphindaq.tft.ShotAlert)
 private:
  void set_has_shot_num();
  void clear_has_shot_num();
  void set_has_shot_time();
  void clear_has_shot_time();
  void set_has_shot_time_alt_nanos();
  void clear_has_shot_time_alt_nanos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::Timestamp* shot_time_;
  ::google::protobuf::uint64 shot_num_;
  ::google::protobuf::uint64 shot_time_alt_nanos_;
  friend struct ::protobuf_tft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dolphindaq.tft.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(NULL);
  }

  Image* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes vals = 6;
  bool has_vals() const;
  void clear_vals();
  static const int kValsFieldNumber = 6;
  const ::std::string& vals() const;
  void set_vals(const ::std::string& value);
  #if LANG_CXX11
  void set_vals(::std::string&& value);
  #endif
  void set_vals(const char* value);
  void set_vals(const void* value, size_t size);
  ::std::string* mutable_vals();
  ::std::string* release_vals();
  void set_allocated_vals(::std::string* vals);

  // optional .google.protobuf.Timestamp shot_time = 2;
  bool has_shot_time() const;
  void clear_shot_time();
  static const int kShotTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_shot_time() const;
  public:
  const ::google::protobuf::Timestamp& shot_time() const;
  ::google::protobuf::Timestamp* release_shot_time();
  ::google::protobuf::Timestamp* mutable_shot_time();
  void set_allocated_shot_time(::google::protobuf::Timestamp* shot_time);

  // optional uint64 shot_num = 1;
  bool has_shot_num() const;
  void clear_shot_num();
  static const int kShotNumFieldNumber = 1;
  ::google::protobuf::uint64 shot_num() const;
  void set_shot_num(::google::protobuf::uint64 value);

  // optional uint64 shot_time_alt_nanos = 3;
  bool has_shot_time_alt_nanos() const;
  void clear_shot_time_alt_nanos();
  static const int kShotTimeAltNanosFieldNumber = 3;
  ::google::protobuf::uint64 shot_time_alt_nanos() const;
  void set_shot_time_alt_nanos(::google::protobuf::uint64 value);

  // optional uint32 nx = 4;
  bool has_nx() const;
  void clear_nx();
  static const int kNxFieldNumber = 4;
  ::google::protobuf::uint32 nx() const;
  void set_nx(::google::protobuf::uint32 value);

  // optional uint32 ny = 5;
  bool has_ny() const;
  void clear_ny();
  static const int kNyFieldNumber = 5;
  ::google::protobuf::uint32 ny() const;
  void set_ny(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dolphindaq.tft.Image)
 private:
  void set_has_shot_num();
  void clear_has_shot_num();
  void set_has_shot_time();
  void clear_has_shot_time();
  void set_has_shot_time_alt_nanos();
  void clear_has_shot_time_alt_nanos();
  void set_has_nx();
  void clear_has_nx();
  void set_has_ny();
  void clear_has_ny();
  void set_has_vals();
  void clear_has_vals();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr vals_;
  ::google::protobuf::Timestamp* shot_time_;
  ::google::protobuf::uint64 shot_num_;
  ::google::protobuf::uint64 shot_time_alt_nanos_;
  ::google::protobuf::uint32 nx_;
  ::google::protobuf::uint32 ny_;
  friend struct ::protobuf_tft_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShotAlert

// optional uint64 shot_num = 1;
inline bool ShotAlert::has_shot_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShotAlert::set_has_shot_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShotAlert::clear_has_shot_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShotAlert::clear_shot_num() {
  shot_num_ = GOOGLE_ULONGLONG(0);
  clear_has_shot_num();
}
inline ::google::protobuf::uint64 ShotAlert::shot_num() const {
  // @@protoc_insertion_point(field_get:dolphindaq.tft.ShotAlert.shot_num)
  return shot_num_;
}
inline void ShotAlert::set_shot_num(::google::protobuf::uint64 value) {
  set_has_shot_num();
  shot_num_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.tft.ShotAlert.shot_num)
}

// optional .google.protobuf.Timestamp shot_time = 2;
inline bool ShotAlert::has_shot_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShotAlert::set_has_shot_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShotAlert::clear_has_shot_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::google::protobuf::Timestamp& ShotAlert::_internal_shot_time() const {
  return *shot_time_;
}
inline const ::google::protobuf::Timestamp& ShotAlert::shot_time() const {
  const ::google::protobuf::Timestamp* p = shot_time_;
  // @@protoc_insertion_point(field_get:dolphindaq.tft.ShotAlert.shot_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ShotAlert::release_shot_time() {
  // @@protoc_insertion_point(field_release:dolphindaq.tft.ShotAlert.shot_time)
  clear_has_shot_time();
  ::google::protobuf::Timestamp* temp = shot_time_;
  shot_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ShotAlert::mutable_shot_time() {
  set_has_shot_time();
  if (shot_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    shot_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dolphindaq.tft.ShotAlert.shot_time)
  return shot_time_;
}
inline void ShotAlert::set_allocated_shot_time(::google::protobuf::Timestamp* shot_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(shot_time_);
  }
  if (shot_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(shot_time)->GetArena();
    if (message_arena != submessage_arena) {
      shot_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shot_time, submessage_arena);
    }
    set_has_shot_time();
  } else {
    clear_has_shot_time();
  }
  shot_time_ = shot_time;
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.tft.ShotAlert.shot_time)
}

// optional uint64 shot_time_alt_nanos = 3;
inline bool ShotAlert::has_shot_time_alt_nanos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShotAlert::set_has_shot_time_alt_nanos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShotAlert::clear_has_shot_time_alt_nanos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShotAlert::clear_shot_time_alt_nanos() {
  shot_time_alt_nanos_ = GOOGLE_ULONGLONG(0);
  clear_has_shot_time_alt_nanos();
}
inline ::google::protobuf::uint64 ShotAlert::shot_time_alt_nanos() const {
  // @@protoc_insertion_point(field_get:dolphindaq.tft.ShotAlert.shot_time_alt_nanos)
  return shot_time_alt_nanos_;
}
inline void ShotAlert::set_shot_time_alt_nanos(::google::protobuf::uint64 value) {
  set_has_shot_time_alt_nanos();
  shot_time_alt_nanos_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.tft.ShotAlert.shot_time_alt_nanos)
}

// -------------------------------------------------------------------

// Image

// optional uint64 shot_num = 1;
inline bool Image::has_shot_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_shot_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_shot_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_shot_num() {
  shot_num_ = GOOGLE_ULONGLONG(0);
  clear_has_shot_num();
}
inline ::google::protobuf::uint64 Image::shot_num() const {
  // @@protoc_insertion_point(field_get:dolphindaq.tft.Image.shot_num)
  return shot_num_;
}
inline void Image::set_shot_num(::google::protobuf::uint64 value) {
  set_has_shot_num();
  shot_num_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.tft.Image.shot_num)
}

// optional .google.protobuf.Timestamp shot_time = 2;
inline bool Image::has_shot_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_shot_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_shot_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::google::protobuf::Timestamp& Image::_internal_shot_time() const {
  return *shot_time_;
}
inline const ::google::protobuf::Timestamp& Image::shot_time() const {
  const ::google::protobuf::Timestamp* p = shot_time_;
  // @@protoc_insertion_point(field_get:dolphindaq.tft.Image.shot_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Image::release_shot_time() {
  // @@protoc_insertion_point(field_release:dolphindaq.tft.Image.shot_time)
  clear_has_shot_time();
  ::google::protobuf::Timestamp* temp = shot_time_;
  shot_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Image::mutable_shot_time() {
  set_has_shot_time();
  if (shot_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    shot_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dolphindaq.tft.Image.shot_time)
  return shot_time_;
}
inline void Image::set_allocated_shot_time(::google::protobuf::Timestamp* shot_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(shot_time_);
  }
  if (shot_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(shot_time)->GetArena();
    if (message_arena != submessage_arena) {
      shot_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shot_time, submessage_arena);
    }
    set_has_shot_time();
  } else {
    clear_has_shot_time();
  }
  shot_time_ = shot_time;
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.tft.Image.shot_time)
}

// optional uint64 shot_time_alt_nanos = 3;
inline bool Image::has_shot_time_alt_nanos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_shot_time_alt_nanos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_shot_time_alt_nanos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_shot_time_alt_nanos() {
  shot_time_alt_nanos_ = GOOGLE_ULONGLONG(0);
  clear_has_shot_time_alt_nanos();
}
inline ::google::protobuf::uint64 Image::shot_time_alt_nanos() const {
  // @@protoc_insertion_point(field_get:dolphindaq.tft.Image.shot_time_alt_nanos)
  return shot_time_alt_nanos_;
}
inline void Image::set_shot_time_alt_nanos(::google::protobuf::uint64 value) {
  set_has_shot_time_alt_nanos();
  shot_time_alt_nanos_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.tft.Image.shot_time_alt_nanos)
}

// optional uint32 nx = 4;
inline bool Image::has_nx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Image::set_has_nx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Image::clear_has_nx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Image::clear_nx() {
  nx_ = 0u;
  clear_has_nx();
}
inline ::google::protobuf::uint32 Image::nx() const {
  // @@protoc_insertion_point(field_get:dolphindaq.tft.Image.nx)
  return nx_;
}
inline void Image::set_nx(::google::protobuf::uint32 value) {
  set_has_nx();
  nx_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.tft.Image.nx)
}

// optional uint32 ny = 5;
inline bool Image::has_ny() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Image::set_has_ny() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Image::clear_has_ny() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Image::clear_ny() {
  ny_ = 0u;
  clear_has_ny();
}
inline ::google::protobuf::uint32 Image::ny() const {
  // @@protoc_insertion_point(field_get:dolphindaq.tft.Image.ny)
  return ny_;
}
inline void Image::set_ny(::google::protobuf::uint32 value) {
  set_has_ny();
  ny_ = value;
  // @@protoc_insertion_point(field_set:dolphindaq.tft.Image.ny)
}

// optional bytes vals = 6;
inline bool Image::has_vals() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_vals() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_vals() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_vals() {
  vals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vals();
}
inline const ::std::string& Image::vals() const {
  // @@protoc_insertion_point(field_get:dolphindaq.tft.Image.vals)
  return vals_.GetNoArena();
}
inline void Image::set_vals(const ::std::string& value) {
  set_has_vals();
  vals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dolphindaq.tft.Image.vals)
}
#if LANG_CXX11
inline void Image::set_vals(::std::string&& value) {
  set_has_vals();
  vals_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dolphindaq.tft.Image.vals)
}
#endif
inline void Image::set_vals(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vals();
  vals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dolphindaq.tft.Image.vals)
}
inline void Image::set_vals(const void* value, size_t size) {
  set_has_vals();
  vals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dolphindaq.tft.Image.vals)
}
inline ::std::string* Image::mutable_vals() {
  set_has_vals();
  // @@protoc_insertion_point(field_mutable:dolphindaq.tft.Image.vals)
  return vals_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_vals() {
  // @@protoc_insertion_point(field_release:dolphindaq.tft.Image.vals)
  if (!has_vals()) {
    return NULL;
  }
  clear_has_vals();
  return vals_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_vals(::std::string* vals) {
  if (vals != NULL) {
    set_has_vals();
  } else {
    clear_has_vals();
  }
  vals_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vals);
  // @@protoc_insertion_point(field_set_allocated:dolphindaq.tft.Image.vals)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tft
}  // namespace dolphindaq

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tft_2eproto
