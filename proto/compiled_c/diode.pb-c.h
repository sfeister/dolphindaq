/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: diode.proto */

#ifndef PROTOBUF_C_diode_2eproto__INCLUDED
#define PROTOBUF_C_diode_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/timestamp.pb-c.h"

typedef struct _Dolphindaq__Diode__Settings Dolphindaq__Diode__Settings;
typedef struct _Dolphindaq__Diode__Data Dolphindaq__Diode__Data;
typedef struct _Dolphindaq__Diode__Trace Dolphindaq__Diode__Trace;
typedef struct _Dolphindaq__Diode__Metrics Dolphindaq__Diode__Metrics;


/* --- enums --- */


/* --- messages --- */

/*
 * Overall (slowly changing) settings; re-create TCP connection whenever settings change
 * Send Settings message on every new TCP connection
 */
struct  _Dolphindaq__Diode__Settings
{
  ProtobufCMessage base;
  /*
   * First shot number for which settings will apply (?)
   */
  uint64_t shot_num;
  /*
   * Time after which settings will apply
   */
  Google__Protobuf__Timestamp *real_time;
  /*
   * Time values in Seconds for the trace; same length as Trace.yvals
   */
  size_t n_trace_tvals;
  double *trace_tvals;
  /*
   * For linearly spaced tvals, time delta between adjacent time values, in Seconds
   */
  double trace_dt;
  /*
   * Length of the Trace.yvals array
   */
  uint32_t trace_nt;
  /*
   * Y value in Volts represented by uint16 value of 0
   */
  double trace_ymin;
  /*
   * Y value in Volts represented by uint16 value of 2^16 - 1
   */
  double trace_ymax;
  /*
   * Time delay #1 (trigger start to trace start, in Seconds)
   */
  double t1;
  /*
   * Time delay #2 (trace start / background start to background end, in Seconds)
   */
  double t2;
  /*
   * Time delay #3 (background end to signal start, in Seconds)
   */
  double t3;
  /*
   * Time delay #4 (signal start to  signal end / trace end, in Seconds)
   */
  double t4;
  /*
   * Number of seconds in one CPU tick
   */
  double cputick_secs;
  /*
   * Number of seconds in one dt step
   */
  double dt_secs;
  /*
   * Number of CPU ticks in one dt step
   */
  uint32_t dt_cputicks;
  /*
   * Time delay #1, in dt steps
   */
  uint32_t t1_dts;
  /*
   * Time delay #2, in dt steps
   */
  uint32_t t2_dts;
  /*
   * Time delay #3, in dt steps
   */
  uint32_t t3_dts;
  /*
   * Time delay #4, in dt steps
   */
  uint32_t t4_dts;
};
#define DOLPHINDAQ__DIODE__SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dolphindaq__diode__settings__descriptor) \
    , 0, NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * Send Data message from device to server as often as desired
 */
struct  _Dolphindaq__Diode__Data
{
  ProtobufCMessage base;
  Dolphindaq__Diode__Trace *trace;
  Dolphindaq__Diode__Metrics *metrics;
};
#define DOLPHINDAQ__DIODE__DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dolphindaq__diode__data__descriptor) \
    , NULL, NULL }


/*
 * A single data trace
 */
struct  _Dolphindaq__Diode__Trace
{
  ProtobufCMessage base;
  uint64_t shot_num;
  Google__Protobuf__Timestamp *shot_time;
  /*
   * same length of uint16 numbers as Settings.trace_tvals; (encoding UINT16 is not an option in Google protobufs)
   */
  ProtobufCBinaryData yvals;
};
#define DOLPHINDAQ__DIODE__TRACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dolphindaq__diode__trace__descriptor) \
    , 0, NULL, {0,NULL} }


/*
 * A group of shot-to-shot metrics (computed on the device)
 */
struct  _Dolphindaq__Diode__Metrics
{
  ProtobufCMessage base;
  /*
   * Shot numbers for these metrics
   */
  size_t n_shot_num;
  uint64_t *shot_num;
  /*
   * Shot times for these metrics
   */
  size_t n_shot_times;
  Google__Protobuf__Timestamp **shot_times;
  /*
   * Sum of the trace, same length as shot_nums
   */
  size_t n_trace_sum;
  uint64_t *trace_sum;
  /*
   * Mean value of the trace, same length as shot_nums
   */
  size_t n_trace_mean;
  double *trace_mean;
  /*
   * Max value of the trace, same length as shot_nums
   */
  size_t n_trace_max;
  uint64_t *trace_max;
  /*
   * Min value of the trace, same length as shot_nums
   */
  size_t n_trace_min;
  uint64_t *trace_min;
  /*
   * Custom analysis of the trace, same length as shot_nums  
   */
  size_t n_trace_custom;
  double *trace_custom;
  /*
   * Reduced mean signal, in Volts, (mean signal - mean background), same length as shot_nums
   */
  size_t n_signal_mean;
  double *signal_mean;
  /*
   * Reduced maximum signal, in Volts, (maximum signal - mean background), same length as shot_nums
   */
  size_t n_signal_max;
  double *signal_max;
  /*
   * Reduced signal integration (Integral of [signal - mean background]), in Volts * seconds, same length as shot_nums
   */
  size_t n_signal_integ;
  double *signal_integ;
};
#define DOLPHINDAQ__DIODE__METRICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dolphindaq__diode__metrics__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/* Dolphindaq__Diode__Settings methods */
void   dolphindaq__diode__settings__init
                     (Dolphindaq__Diode__Settings         *message);
size_t dolphindaq__diode__settings__get_packed_size
                     (const Dolphindaq__Diode__Settings   *message);
size_t dolphindaq__diode__settings__pack
                     (const Dolphindaq__Diode__Settings   *message,
                      uint8_t             *out);
size_t dolphindaq__diode__settings__pack_to_buffer
                     (const Dolphindaq__Diode__Settings   *message,
                      ProtobufCBuffer     *buffer);
Dolphindaq__Diode__Settings *
       dolphindaq__diode__settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dolphindaq__diode__settings__free_unpacked
                     (Dolphindaq__Diode__Settings *message,
                      ProtobufCAllocator *allocator);
/* Dolphindaq__Diode__Data methods */
void   dolphindaq__diode__data__init
                     (Dolphindaq__Diode__Data         *message);
size_t dolphindaq__diode__data__get_packed_size
                     (const Dolphindaq__Diode__Data   *message);
size_t dolphindaq__diode__data__pack
                     (const Dolphindaq__Diode__Data   *message,
                      uint8_t             *out);
size_t dolphindaq__diode__data__pack_to_buffer
                     (const Dolphindaq__Diode__Data   *message,
                      ProtobufCBuffer     *buffer);
Dolphindaq__Diode__Data *
       dolphindaq__diode__data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dolphindaq__diode__data__free_unpacked
                     (Dolphindaq__Diode__Data *message,
                      ProtobufCAllocator *allocator);
/* Dolphindaq__Diode__Trace methods */
void   dolphindaq__diode__trace__init
                     (Dolphindaq__Diode__Trace         *message);
size_t dolphindaq__diode__trace__get_packed_size
                     (const Dolphindaq__Diode__Trace   *message);
size_t dolphindaq__diode__trace__pack
                     (const Dolphindaq__Diode__Trace   *message,
                      uint8_t             *out);
size_t dolphindaq__diode__trace__pack_to_buffer
                     (const Dolphindaq__Diode__Trace   *message,
                      ProtobufCBuffer     *buffer);
Dolphindaq__Diode__Trace *
       dolphindaq__diode__trace__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dolphindaq__diode__trace__free_unpacked
                     (Dolphindaq__Diode__Trace *message,
                      ProtobufCAllocator *allocator);
/* Dolphindaq__Diode__Metrics methods */
void   dolphindaq__diode__metrics__init
                     (Dolphindaq__Diode__Metrics         *message);
size_t dolphindaq__diode__metrics__get_packed_size
                     (const Dolphindaq__Diode__Metrics   *message);
size_t dolphindaq__diode__metrics__pack
                     (const Dolphindaq__Diode__Metrics   *message,
                      uint8_t             *out);
size_t dolphindaq__diode__metrics__pack_to_buffer
                     (const Dolphindaq__Diode__Metrics   *message,
                      ProtobufCBuffer     *buffer);
Dolphindaq__Diode__Metrics *
       dolphindaq__diode__metrics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dolphindaq__diode__metrics__free_unpacked
                     (Dolphindaq__Diode__Metrics *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Dolphindaq__Diode__Settings_Closure)
                 (const Dolphindaq__Diode__Settings *message,
                  void *closure_data);
typedef void (*Dolphindaq__Diode__Data_Closure)
                 (const Dolphindaq__Diode__Data *message,
                  void *closure_data);
typedef void (*Dolphindaq__Diode__Trace_Closure)
                 (const Dolphindaq__Diode__Trace *message,
                  void *closure_data);
typedef void (*Dolphindaq__Diode__Metrics_Closure)
                 (const Dolphindaq__Diode__Metrics *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor dolphindaq__diode__settings__descriptor;
extern const ProtobufCMessageDescriptor dolphindaq__diode__data__descriptor;
extern const ProtobufCMessageDescriptor dolphindaq__diode__trace__descriptor;
extern const ProtobufCMessageDescriptor dolphindaq__diode__metrics__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_diode_2eproto__INCLUDED */
